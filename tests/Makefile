# Makefile.in generated by automake 1.15 from Makefile.am.
# tests/Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994-2014 Free Software Foundation, Inc.

# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.



am__is_gnu_make = { \
  if test -z '$(MAKELEVEL)'; then \
    false; \
  elif test -n '$(MAKE_HOST)'; then \
    true; \
  elif test -n '$(MAKE_VERSION)' && test -n '$(CURDIR)'; then \
    true; \
  else \
    false; \
  fi; \
}
am__make_running_with_option = \
  case $${target_option-} in \
      ?) ;; \
      *) echo "am__make_running_with_option: internal error: invalid" \
              "target option '$${target_option-}' specified" >&2; \
         exit 1;; \
  esac; \
  has_opt=no; \
  sane_makeflags=$$MAKEFLAGS; \
  if $(am__is_gnu_make); then \
    sane_makeflags=$$MFLAGS; \
  else \
    case $$MAKEFLAGS in \
      *\\[\ \	]*) \
        bs=\\; \
        sane_makeflags=`printf '%s\n' "$$MAKEFLAGS" \
          | sed "s/$$bs$$bs[$$bs $$bs	]*//g"`;; \
    esac; \
  fi; \
  skip_next=no; \
  strip_trailopt () \
  { \
    flg=`printf '%s\n' "$$flg" | sed "s/$$1.*$$//"`; \
  }; \
  for flg in $$sane_makeflags; do \
    test $$skip_next = yes && { skip_next=no; continue; }; \
    case $$flg in \
      *=*|--*) continue;; \
        -*I) strip_trailopt 'I'; skip_next=yes;; \
      -*I?*) strip_trailopt 'I';; \
        -*O) strip_trailopt 'O'; skip_next=yes;; \
      -*O?*) strip_trailopt 'O';; \
        -*l) strip_trailopt 'l'; skip_next=yes;; \
      -*l?*) strip_trailopt 'l';; \
      -[dEDm]) skip_next=yes;; \
      -[JT]) skip_next=yes;; \
    esac; \
    case $$flg in \
      *$$target_option*) has_opt=yes; break;; \
    esac; \
  done; \
  test $$has_opt = yes
am__make_dryrun = (target_option=n; $(am__make_running_with_option))
am__make_keepgoing = (target_option=k; $(am__make_running_with_option))
pkgdatadir = $(datadir)/megara-fmpt
pkgincludedir = $(includedir)/megara-fmpt
pkglibdir = $(libdir)/megara-fmpt
pkglibexecdir = $(libexecdir)/megara-fmpt
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = x86_64-pc-linux-gnu
host_triplet = x86_64-pc-linux-gnu
#TESTS = no_tests.sh
TESTS = main_testVCLemu$(EXEEXT) \
	main_testExceptions$(EXEEXT) \
	main_testScalars$(EXEEXT) \
	main_testVectors$(EXEEXT) \
	main_testGeometry$(EXEEXT) \
	main_testStrings$(EXEEXT) \
	main_testStrPR$(EXEEXT) \
	main_testTextFile$(EXEEXT) \
	main_testSlideArray$(EXEEXT) \
	main_testPointersSlideArray$(EXEEXT) \
	main_testItemsList$(EXEEXT) \
	main_testPointersList$(EXEEXT) \
	main_testVector$(EXEEXT) \
	main_testQuantificator$(EXEEXT) \
	main_testFunction$(EXEEXT) \
	main_testMotionFunction$(EXEEXT) \
	main_testSquareFunction$(EXEEXT) \
	main_testRampFunction$(EXEEXT) \
	main_testComposedMotionFunction$(EXEEXT) \
	main_testFigure$(EXEEXT) \
	main_testContourFigureList$(EXEEXT) \
	main_testBarrier$(EXEEXT) \
	main_testExclusionArea$(EXEEXT) \
	main_testExclusionAreaList$(EXEEXT) \
	main_testInstruction$(EXEEXT) \
	main_testMessageInstruction$(EXEEXT) \
	main_testPairPositionAngles$(EXEEXT) \
	main_testMotionProgram$(EXEEXT) \
	main_testArm$(EXEEXT) \
	main_testCilinder$(EXEEXT) \
	main_testActuator$(EXEEXT) \
	main_testRoboticPositioner$(EXEEXT) \
	main_testRoboticPositionerList1$(EXEEXT) \
	main_testRoboticPositionerList2$(EXEEXT) \
	main_testRoboticPositionerList3$(EXEEXT) \
	main_testFiberMOSModel$(EXEEXT) \
	main_testFiberConnectionModel$(EXEEXT) \
	main_testSkyPoint$(EXEEXT) \
	main_testProjectionPoint$(EXEEXT) \
	main_testTile$(EXEEXT) \
	main_testTelescopeProjectionModel$(EXEEXT) \
	main_testAllocation$(EXEEXT) \
	main_testAllocationList$(EXEEXT) \
	main_testMotionProgramValidator$(EXEEXT) \
	main_testMotionProgramGenerator$(EXEEXT) \
	main_testPositionerCenter$(EXEEXT) \
	main_testFileMethods$(EXEEXT) \
	main_testFMOSATable$(EXEEXT) \
	main_testOutputs$(EXEEXT)
check_PROGRAMS = main_testVCLemu$(EXEEXT) \
	main_testExceptions$(EXEEXT) \
	main_testScalars$(EXEEXT) \
	main_testVectors$(EXEEXT) \
	main_testGeometry$(EXEEXT) \
	main_testStrings$(EXEEXT) \
	main_testStrPR$(EXEEXT) \
	main_testTextFile$(EXEEXT) \
	main_testSlideArray$(EXEEXT) \
	main_testPointersSlideArray$(EXEEXT) \
	main_testItemsList$(EXEEXT) \
	main_testPointersList$(EXEEXT) \
	main_testVector$(EXEEXT) \
	main_testQuantificator$(EXEEXT) \
	main_testFunction$(EXEEXT) \
	main_testMotionFunction$(EXEEXT) \
	main_testSquareFunction$(EXEEXT) \
	main_testRampFunction$(EXEEXT) \
	main_testComposedMotionFunction$(EXEEXT) \
	main_testFigure$(EXEEXT) \
	main_testContourFigureList$(EXEEXT) \
	main_testBarrier$(EXEEXT) \
	main_testExclusionArea$(EXEEXT) \
	main_testExclusionAreaList$(EXEEXT) \
	main_testInstruction$(EXEEXT) \
	main_testMessageInstruction$(EXEEXT) \
	main_testPairPositionAngles$(EXEEXT) \
	main_testMotionProgram$(EXEEXT) \
	main_testArm$(EXEEXT) \
	main_testCilinder$(EXEEXT) \
	main_testActuator$(EXEEXT) \
	main_testRoboticPositioner$(EXEEXT) \
	main_testRoboticPositionerList1$(EXEEXT) \
	main_testRoboticPositionerList2$(EXEEXT) \
	main_testRoboticPositionerList3$(EXEEXT) \
	main_testFiberMOSModel$(EXEEXT) \
	main_testFiberConnectionModel$(EXEEXT) \
	main_testSkyPoint$(EXEEXT) \
	main_testProjectionPoint$(EXEEXT) \
	main_testTile$(EXEEXT) \
	main_testTelescopeProjectionModel$(EXEEXT) \
	main_testAllocation$(EXEEXT) \
	main_testAllocationList$(EXEEXT) \
	main_testMotionProgramValidator$(EXEEXT) \
	main_testMotionProgramGenerator$(EXEEXT) \
	main_testPositionerCenter$(EXEEXT) \
	main_testFileMethods$(EXEEXT) \
	main_testFMOSATable$(EXEEXT) \
	main_testOutputs$(EXEEXT)
subdir = tests
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/m4/libtool.m4 \
	$(top_srcdir)/m4/ltoptions.m4 $(top_srcdir)/m4/ltsugar.m4 \
	$(top_srcdir)/m4/ltversion.m4 $(top_srcdir)/m4/lt~obsolete.m4 \
	$(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
DIST_COMMON = $(srcdir)/Makefile.am $(am__dist_check_SCRIPTS_DIST) \
	$(am__DIST_COMMON)
mkinstalldirs = $(install_sh) -d
CONFIG_HEADER = $(top_builddir)/config.h
CONFIG_CLEAN_FILES =
CONFIG_CLEAN_VPATH_FILES =
am__main_testActuator_SOURCES_DIST = main_testActuator.cpp \
	testActuator.h testActuator.cpp
am_main_testActuator_OBJECTS =  \
	main_testActuator.$(OBJEXT) \
	testActuator.$(OBJEXT)
main_testActuator_OBJECTS = $(am_main_testActuator_OBJECTS)
main_testActuator_LDADD = $(LDADD)
am__DEPENDENCIES_1 =
main_testActuator_DEPENDENCIES =  \
	$(top_builddir)/src/libfmpt.la \
	$(am__DEPENDENCIES_1)
AM_V_lt = $(am__v_lt_$(V))
am__v_lt_ = $(am__v_lt_$(AM_DEFAULT_VERBOSITY))
am__v_lt_0 = --silent
am__v_lt_1 = 
am__main_testAllocation_SOURCES_DIST = main_testAllocation.cpp \
	testAllocation.h testAllocation.cpp
am_main_testAllocation_OBJECTS =  \
	main_testAllocation.$(OBJEXT) \
	testAllocation.$(OBJEXT)
main_testAllocation_OBJECTS = $(am_main_testAllocation_OBJECTS)
main_testAllocation_LDADD = $(LDADD)
main_testAllocation_DEPENDENCIES =  \
	$(top_builddir)/src/libfmpt.la \
	$(am__DEPENDENCIES_1)
am__main_testAllocationList_SOURCES_DIST =  \
	main_testAllocationList.cpp testAllocationList.h \
	testAllocationList.cpp
am_main_testAllocationList_OBJECTS =  \
	main_testAllocationList.$(OBJEXT) \
	testAllocationList.$(OBJEXT)
main_testAllocationList_OBJECTS =  \
	$(am_main_testAllocationList_OBJECTS)
main_testAllocationList_LDADD = $(LDADD)
main_testAllocationList_DEPENDENCIES =  \
	$(top_builddir)/src/libfmpt.la \
	$(am__DEPENDENCIES_1)
am__main_testArm_SOURCES_DIST = main_testArm.cpp testArm.h testArm.cpp
am_main_testArm_OBJECTS = main_testArm.$(OBJEXT) \
	testArm.$(OBJEXT)
main_testArm_OBJECTS = $(am_main_testArm_OBJECTS)
main_testArm_LDADD = $(LDADD)
main_testArm_DEPENDENCIES =  \
	$(top_builddir)/src/libfmpt.la \
	$(am__DEPENDENCIES_1)
am__main_testBarrier_SOURCES_DIST = main_testBarrier.cpp testBarrier.h \
	testBarrier.cpp
am_main_testBarrier_OBJECTS =  \
	main_testBarrier.$(OBJEXT) \
	testBarrier.$(OBJEXT)
main_testBarrier_OBJECTS = $(am_main_testBarrier_OBJECTS)
main_testBarrier_LDADD = $(LDADD)
main_testBarrier_DEPENDENCIES =  \
	$(top_builddir)/src/libfmpt.la \
	$(am__DEPENDENCIES_1)
am__main_testCilinder_SOURCES_DIST = main_testCilinder.cpp \
	testCilinder.h testCilinder.cpp
am_main_testCilinder_OBJECTS =  \
	main_testCilinder.$(OBJEXT) \
	testCilinder.$(OBJEXT)
main_testCilinder_OBJECTS = $(am_main_testCilinder_OBJECTS)
main_testCilinder_LDADD = $(LDADD)
main_testCilinder_DEPENDENCIES =  \
	$(top_builddir)/src/libfmpt.la \
	$(am__DEPENDENCIES_1)
am__main_testComposedMotionFunction_SOURCES_DIST =  \
	main_testComposedMotionFunction.cpp \
	testComposedMotionFunction.h testComposedMotionFunction.cpp
am_main_testComposedMotionFunction_OBJECTS =  \
	main_testComposedMotionFunction.$(OBJEXT) \
	testComposedMotionFunction.$(OBJEXT)
main_testComposedMotionFunction_OBJECTS =  \
	$(am_main_testComposedMotionFunction_OBJECTS)
main_testComposedMotionFunction_LDADD = $(LDADD)
main_testComposedMotionFunction_DEPENDENCIES =  \
	$(top_builddir)/src/libfmpt.la \
	$(am__DEPENDENCIES_1)
am__main_testContourFigureList_SOURCES_DIST =  \
	main_testContourFigureList.cpp testContourFigureList.h \
	testContourFigureList.cpp
am_main_testContourFigureList_OBJECTS =  \
	main_testContourFigureList.$(OBJEXT) \
	testContourFigureList.$(OBJEXT)
main_testContourFigureList_OBJECTS =  \
	$(am_main_testContourFigureList_OBJECTS)
main_testContourFigureList_LDADD = $(LDADD)
main_testContourFigureList_DEPENDENCIES =  \
	$(top_builddir)/src/libfmpt.la \
	$(am__DEPENDENCIES_1)
am__main_testExceptions_SOURCES_DIST = main_testExceptions.cpp \
	testExceptions.h testExceptions.cpp
am_main_testExceptions_OBJECTS =  \
	main_testExceptions.$(OBJEXT) \
	testExceptions.$(OBJEXT)
main_testExceptions_OBJECTS = $(am_main_testExceptions_OBJECTS)
main_testExceptions_LDADD = $(LDADD)
main_testExceptions_DEPENDENCIES =  \
	$(top_builddir)/src/libfmpt.la \
	$(am__DEPENDENCIES_1)
am__main_testExclusionArea_SOURCES_DIST = main_testExclusionArea.cpp \
	testExclusionArea.h testExclusionArea.cpp
am_main_testExclusionArea_OBJECTS =  \
	main_testExclusionArea.$(OBJEXT) \
	testExclusionArea.$(OBJEXT)
main_testExclusionArea_OBJECTS = $(am_main_testExclusionArea_OBJECTS)
main_testExclusionArea_LDADD = $(LDADD)
main_testExclusionArea_DEPENDENCIES =  \
	$(top_builddir)/src/libfmpt.la \
	$(am__DEPENDENCIES_1)
am__main_testExclusionAreaList_SOURCES_DIST =  \
	main_testExclusionAreaList.cpp testExclusionAreaList.h \
	testExclusionAreaList.cpp
am_main_testExclusionAreaList_OBJECTS =  \
	main_testExclusionAreaList.$(OBJEXT) \
	testExclusionAreaList.$(OBJEXT)
main_testExclusionAreaList_OBJECTS =  \
	$(am_main_testExclusionAreaList_OBJECTS)
main_testExclusionAreaList_LDADD = $(LDADD)
main_testExclusionAreaList_DEPENDENCIES =  \
	$(top_builddir)/src/libfmpt.la \
	$(am__DEPENDENCIES_1)
am__main_testFMOSATable_SOURCES_DIST = main_testFMOSATable.cpp \
	testFMOSATable.h testFMOSATable.cpp
am_main_testFMOSATable_OBJECTS =  \
	main_testFMOSATable.$(OBJEXT) \
	testFMOSATable.$(OBJEXT)
main_testFMOSATable_OBJECTS = $(am_main_testFMOSATable_OBJECTS)
main_testFMOSATable_LDADD = $(LDADD)
main_testFMOSATable_DEPENDENCIES =  \
	$(top_builddir)/src/libfmpt.la \
	$(am__DEPENDENCIES_1)
am__main_testFiberConnectionModel_SOURCES_DIST =  \
	main_testFiberConnectionModel.cpp testFiberConnectionModel.h \
	testFiberConnectionModel.cpp
am_main_testFiberConnectionModel_OBJECTS =  \
	main_testFiberConnectionModel.$(OBJEXT) \
	testFiberConnectionModel.$(OBJEXT)
main_testFiberConnectionModel_OBJECTS =  \
	$(am_main_testFiberConnectionModel_OBJECTS)
main_testFiberConnectionModel_LDADD = $(LDADD)
main_testFiberConnectionModel_DEPENDENCIES =  \
	$(top_builddir)/src/libfmpt.la \
	$(am__DEPENDENCIES_1)
am__main_testFiberMOSModel_SOURCES_DIST = main_testFiberMOSModel.cpp \
	testFiberMOSModel.h testFiberMOSModel.cpp
am_main_testFiberMOSModel_OBJECTS =  \
	main_testFiberMOSModel.$(OBJEXT) \
	testFiberMOSModel.$(OBJEXT)
main_testFiberMOSModel_OBJECTS = $(am_main_testFiberMOSModel_OBJECTS)
main_testFiberMOSModel_LDADD = $(LDADD)
main_testFiberMOSModel_DEPENDENCIES =  \
	$(top_builddir)/src/libfmpt.la \
	$(am__DEPENDENCIES_1)
am__main_testFigure_SOURCES_DIST = main_testFigure.cpp testFigure.h \
	testFigure.cpp
am_main_testFigure_OBJECTS =  \
	main_testFigure.$(OBJEXT) \
	testFigure.$(OBJEXT)
main_testFigure_OBJECTS = $(am_main_testFigure_OBJECTS)
main_testFigure_LDADD = $(LDADD)
main_testFigure_DEPENDENCIES =  \
	$(top_builddir)/src/libfmpt.la \
	$(am__DEPENDENCIES_1)
am__main_testFileMethods_SOURCES_DIST = main_testFileMethods.cpp \
	testFileMethods.h testFileMethods.cpp
am_main_testFileMethods_OBJECTS =  \
	main_testFileMethods.$(OBJEXT) \
	testFileMethods.$(OBJEXT)
main_testFileMethods_OBJECTS = $(am_main_testFileMethods_OBJECTS)
main_testFileMethods_LDADD = $(LDADD)
main_testFileMethods_DEPENDENCIES =  \
	$(top_builddir)/src/libfmpt.la \
	$(am__DEPENDENCIES_1)
am__main_testFunction_SOURCES_DIST = main_testFunction.cpp \
	testFunction.h testFunction.cpp
am_main_testFunction_OBJECTS =  \
	main_testFunction.$(OBJEXT) \
	testFunction.$(OBJEXT)
main_testFunction_OBJECTS = $(am_main_testFunction_OBJECTS)
main_testFunction_LDADD = $(LDADD)
main_testFunction_DEPENDENCIES =  \
	$(top_builddir)/src/libfmpt.la \
	$(am__DEPENDENCIES_1)
am__main_testGeometry_SOURCES_DIST = main_testGeometry.cpp \
	testGeometry.h testGeometry.cpp
am_main_testGeometry_OBJECTS =  \
	main_testGeometry.$(OBJEXT) \
	testGeometry.$(OBJEXT)
main_testGeometry_OBJECTS = $(am_main_testGeometry_OBJECTS)
main_testGeometry_LDADD = $(LDADD)
main_testGeometry_DEPENDENCIES =  \
	$(top_builddir)/src/libfmpt.la \
	$(am__DEPENDENCIES_1)
am__main_testInstruction_SOURCES_DIST = main_testInstruction.cpp \
	testInstruction.h testInstruction.cpp
am_main_testInstruction_OBJECTS =  \
	main_testInstruction.$(OBJEXT) \
	testInstruction.$(OBJEXT)
main_testInstruction_OBJECTS = $(am_main_testInstruction_OBJECTS)
main_testInstruction_LDADD = $(LDADD)
main_testInstruction_DEPENDENCIES =  \
	$(top_builddir)/src/libfmpt.la \
	$(am__DEPENDENCIES_1)
am__main_testItemsList_SOURCES_DIST = main_testItemsList.cpp \
	testItemsList.h testItemsList.cpp
am_main_testItemsList_OBJECTS =  \
	main_testItemsList.$(OBJEXT) \
	testItemsList.$(OBJEXT)
main_testItemsList_OBJECTS = $(am_main_testItemsList_OBJECTS)
main_testItemsList_LDADD = $(LDADD)
main_testItemsList_DEPENDENCIES =  \
	$(top_builddir)/src/libfmpt.la \
	$(am__DEPENDENCIES_1)
am__main_testMessageInstruction_SOURCES_DIST =  \
	main_testMessageInstruction.cpp testMessageInstruction.h \
	testMessageInstruction.cpp
am_main_testMessageInstruction_OBJECTS =  \
	main_testMessageInstruction.$(OBJEXT) \
	testMessageInstruction.$(OBJEXT)
main_testMessageInstruction_OBJECTS =  \
	$(am_main_testMessageInstruction_OBJECTS)
main_testMessageInstruction_LDADD = $(LDADD)
main_testMessageInstruction_DEPENDENCIES =  \
	$(top_builddir)/src/libfmpt.la \
	$(am__DEPENDENCIES_1)
am__main_testMotionFunction_SOURCES_DIST =  \
	main_testMotionFunction.cpp testMotionFunction.h \
	testMotionFunction.cpp
am_main_testMotionFunction_OBJECTS =  \
	main_testMotionFunction.$(OBJEXT) \
	testMotionFunction.$(OBJEXT)
main_testMotionFunction_OBJECTS =  \
	$(am_main_testMotionFunction_OBJECTS)
main_testMotionFunction_LDADD = $(LDADD)
main_testMotionFunction_DEPENDENCIES =  \
	$(top_builddir)/src/libfmpt.la \
	$(am__DEPENDENCIES_1)
am__main_testMotionProgram_SOURCES_DIST = main_testMotionProgram.cpp \
	testMotionProgram.h testMotionProgram.cpp
am_main_testMotionProgram_OBJECTS =  \
	main_testMotionProgram.$(OBJEXT) \
	testMotionProgram.$(OBJEXT)
main_testMotionProgram_OBJECTS = $(am_main_testMotionProgram_OBJECTS)
main_testMotionProgram_LDADD = $(LDADD)
main_testMotionProgram_DEPENDENCIES =  \
	$(top_builddir)/src/libfmpt.la \
	$(am__DEPENDENCIES_1)
am__main_testMotionProgramGenerator_SOURCES_DIST =  \
	main_testMotionProgramGenerator.cpp \
	testMotionProgramGenerator.h testMotionProgramGenerator.cpp
am_main_testMotionProgramGenerator_OBJECTS =  \
	main_testMotionProgramGenerator.$(OBJEXT) \
	testMotionProgramGenerator.$(OBJEXT)
main_testMotionProgramGenerator_OBJECTS =  \
	$(am_main_testMotionProgramGenerator_OBJECTS)
main_testMotionProgramGenerator_LDADD = $(LDADD)
main_testMotionProgramGenerator_DEPENDENCIES =  \
	$(top_builddir)/src/libfmpt.la \
	$(am__DEPENDENCIES_1)
am__main_testMotionProgramValidator_SOURCES_DIST =  \
	main_testMotionProgramValidator.cpp \
	testMotionProgramValidator.h testMotionProgramValidator.cpp
am_main_testMotionProgramValidator_OBJECTS =  \
	main_testMotionProgramValidator.$(OBJEXT) \
	testMotionProgramValidator.$(OBJEXT)
main_testMotionProgramValidator_OBJECTS =  \
	$(am_main_testMotionProgramValidator_OBJECTS)
main_testMotionProgramValidator_LDADD = $(LDADD)
main_testMotionProgramValidator_DEPENDENCIES =  \
	$(top_builddir)/src/libfmpt.la \
	$(am__DEPENDENCIES_1)
am__main_testOutputs_SOURCES_DIST = main_testOutputs.cpp testOutputs.h \
	testOutputs.cpp
am_main_testOutputs_OBJECTS =  \
	main_testOutputs.$(OBJEXT) \
	testOutputs.$(OBJEXT)
main_testOutputs_OBJECTS = $(am_main_testOutputs_OBJECTS)
main_testOutputs_LDADD = $(LDADD)
main_testOutputs_DEPENDENCIES =  \
	$(top_builddir)/src/libfmpt.la \
	$(am__DEPENDENCIES_1)
am__main_testPairPositionAngles_SOURCES_DIST =  \
	main_testPairPositionAngles.cpp testPairPositionAngles.h \
	testPairPositionAngles.cpp
am_main_testPairPositionAngles_OBJECTS =  \
	main_testPairPositionAngles.$(OBJEXT) \
	testPairPositionAngles.$(OBJEXT)
main_testPairPositionAngles_OBJECTS =  \
	$(am_main_testPairPositionAngles_OBJECTS)
main_testPairPositionAngles_LDADD = $(LDADD)
main_testPairPositionAngles_DEPENDENCIES =  \
	$(top_builddir)/src/libfmpt.la \
	$(am__DEPENDENCIES_1)
am__main_testPointersList_SOURCES_DIST = main_testPointersList.cpp \
	testPointersList.h testPointersList.cpp
am_main_testPointersList_OBJECTS =  \
	main_testPointersList.$(OBJEXT) \
	testPointersList.$(OBJEXT)
main_testPointersList_OBJECTS = $(am_main_testPointersList_OBJECTS)
main_testPointersList_LDADD = $(LDADD)
main_testPointersList_DEPENDENCIES =  \
	$(top_builddir)/src/libfmpt.la \
	$(am__DEPENDENCIES_1)
am__main_testPointersSlideArray_SOURCES_DIST =  \
	main_testPointersSlideArray.cpp testPointersSlideArray.h \
	testPointersSlideArray.cpp
am_main_testPointersSlideArray_OBJECTS =  \
	main_testPointersSlideArray.$(OBJEXT) \
	testPointersSlideArray.$(OBJEXT)
main_testPointersSlideArray_OBJECTS =  \
	$(am_main_testPointersSlideArray_OBJECTS)
main_testPointersSlideArray_LDADD = $(LDADD)
main_testPointersSlideArray_DEPENDENCIES =  \
	$(top_builddir)/src/libfmpt.la \
	$(am__DEPENDENCIES_1)
am__main_testPositionerCenter_SOURCES_DIST =  \
	main_testPositionerCenter.cpp testPositionerCenter.h \
	testPositionerCenter.cpp
am_main_testPositionerCenter_OBJECTS =  \
	main_testPositionerCenter.$(OBJEXT) \
	testPositionerCenter.$(OBJEXT)
main_testPositionerCenter_OBJECTS =  \
	$(am_main_testPositionerCenter_OBJECTS)
main_testPositionerCenter_LDADD = $(LDADD)
main_testPositionerCenter_DEPENDENCIES =  \
	$(top_builddir)/src/libfmpt.la \
	$(am__DEPENDENCIES_1)
am__main_testProjectionPoint_SOURCES_DIST =  \
	main_testProjectionPoint.cpp testProjectionPoint.h \
	testProjectionPoint.cpp
am_main_testProjectionPoint_OBJECTS =  \
	main_testProjectionPoint.$(OBJEXT) \
	testProjectionPoint.$(OBJEXT)
main_testProjectionPoint_OBJECTS =  \
	$(am_main_testProjectionPoint_OBJECTS)
main_testProjectionPoint_LDADD = $(LDADD)
main_testProjectionPoint_DEPENDENCIES =  \
	$(top_builddir)/src/libfmpt.la \
	$(am__DEPENDENCIES_1)
am__main_testQuantificator_SOURCES_DIST = main_testQuantificator.cpp \
	testQuantificator.h testQuantificator.cpp
am_main_testQuantificator_OBJECTS =  \
	main_testQuantificator.$(OBJEXT) \
	testQuantificator.$(OBJEXT)
main_testQuantificator_OBJECTS = $(am_main_testQuantificator_OBJECTS)
main_testQuantificator_LDADD = $(LDADD)
main_testQuantificator_DEPENDENCIES =  \
	$(top_builddir)/src/libfmpt.la \
	$(am__DEPENDENCIES_1)
am__main_testRampFunction_SOURCES_DIST = main_testRampFunction.cpp \
	testRampFunction.h testRampFunction.cpp
am_main_testRampFunction_OBJECTS =  \
	main_testRampFunction.$(OBJEXT) \
	testRampFunction.$(OBJEXT)
main_testRampFunction_OBJECTS = $(am_main_testRampFunction_OBJECTS)
main_testRampFunction_LDADD = $(LDADD)
main_testRampFunction_DEPENDENCIES =  \
	$(top_builddir)/src/libfmpt.la \
	$(am__DEPENDENCIES_1)
am__main_testRoboticPositioner_SOURCES_DIST =  \
	main_testRoboticPositioner.cpp testRoboticPositioner.h \
	testRoboticPositioner.cpp
am_main_testRoboticPositioner_OBJECTS =  \
	main_testRoboticPositioner.$(OBJEXT) \
	testRoboticPositioner.$(OBJEXT)
main_testRoboticPositioner_OBJECTS =  \
	$(am_main_testRoboticPositioner_OBJECTS)
main_testRoboticPositioner_LDADD = $(LDADD)
main_testRoboticPositioner_DEPENDENCIES =  \
	$(top_builddir)/src/libfmpt.la \
	$(am__DEPENDENCIES_1)
am__main_testRoboticPositionerList1_SOURCES_DIST =  \
	main_testRoboticPositionerList1.cpp \
	testRoboticPositionerList1.h testRoboticPositionerList1.cpp
am_main_testRoboticPositionerList1_OBJECTS =  \
	main_testRoboticPositionerList1.$(OBJEXT) \
	testRoboticPositionerList1.$(OBJEXT)
main_testRoboticPositionerList1_OBJECTS =  \
	$(am_main_testRoboticPositionerList1_OBJECTS)
main_testRoboticPositionerList1_LDADD = $(LDADD)
main_testRoboticPositionerList1_DEPENDENCIES =  \
	$(top_builddir)/src/libfmpt.la \
	$(am__DEPENDENCIES_1)
am__main_testRoboticPositionerList2_SOURCES_DIST =  \
	main_testRoboticPositionerList2.cpp \
	testRoboticPositionerList2.h testRoboticPositionerList2.cpp
am_main_testRoboticPositionerList2_OBJECTS =  \
	main_testRoboticPositionerList2.$(OBJEXT) \
	testRoboticPositionerList2.$(OBJEXT)
main_testRoboticPositionerList2_OBJECTS =  \
	$(am_main_testRoboticPositionerList2_OBJECTS)
main_testRoboticPositionerList2_LDADD = $(LDADD)
main_testRoboticPositionerList2_DEPENDENCIES =  \
	$(top_builddir)/src/libfmpt.la \
	$(am__DEPENDENCIES_1)
am__main_testRoboticPositionerList3_SOURCES_DIST =  \
	main_testRoboticPositionerList3.cpp \
	testRoboticPositionerList3.h testRoboticPositionerList3.cpp
am_main_testRoboticPositionerList3_OBJECTS =  \
	main_testRoboticPositionerList3.$(OBJEXT) \
	testRoboticPositionerList3.$(OBJEXT)
main_testRoboticPositionerList3_OBJECTS =  \
	$(am_main_testRoboticPositionerList3_OBJECTS)
main_testRoboticPositionerList3_LDADD = $(LDADD)
main_testRoboticPositionerList3_DEPENDENCIES =  \
	$(top_builddir)/src/libfmpt.la \
	$(am__DEPENDENCIES_1)
am__main_testScalars_SOURCES_DIST = main_testScalars.cpp testScalars.h \
	testScalars.cpp
am_main_testScalars_OBJECTS =  \
	main_testScalars.$(OBJEXT) \
	testScalars.$(OBJEXT)
main_testScalars_OBJECTS = $(am_main_testScalars_OBJECTS)
main_testScalars_LDADD = $(LDADD)
main_testScalars_DEPENDENCIES =  \
	$(top_builddir)/src/libfmpt.la \
	$(am__DEPENDENCIES_1)
am__main_testSkyPoint_SOURCES_DIST = main_testSkyPoint.cpp \
	testSkyPoint.h testSkyPoint.cpp
am_main_testSkyPoint_OBJECTS =  \
	main_testSkyPoint.$(OBJEXT) \
	testSkyPoint.$(OBJEXT)
main_testSkyPoint_OBJECTS = $(am_main_testSkyPoint_OBJECTS)
main_testSkyPoint_LDADD = $(LDADD)
main_testSkyPoint_DEPENDENCIES =  \
	$(top_builddir)/src/libfmpt.la \
	$(am__DEPENDENCIES_1)
am__main_testSlideArray_SOURCES_DIST = main_testSlideArray.cpp \
	testSlideArray.h testSlideArray.cpp
am_main_testSlideArray_OBJECTS =  \
	main_testSlideArray.$(OBJEXT) \
	testSlideArray.$(OBJEXT)
main_testSlideArray_OBJECTS = $(am_main_testSlideArray_OBJECTS)
main_testSlideArray_LDADD = $(LDADD)
main_testSlideArray_DEPENDENCIES =  \
	$(top_builddir)/src/libfmpt.la \
	$(am__DEPENDENCIES_1)
am__main_testSquareFunction_SOURCES_DIST =  \
	main_testSquareFunction.cpp testSquareFunction.h \
	testSquareFunction.cpp
am_main_testSquareFunction_OBJECTS =  \
	main_testSquareFunction.$(OBJEXT) \
	testSquareFunction.$(OBJEXT)
main_testSquareFunction_OBJECTS =  \
	$(am_main_testSquareFunction_OBJECTS)
main_testSquareFunction_LDADD = $(LDADD)
main_testSquareFunction_DEPENDENCIES =  \
	$(top_builddir)/src/libfmpt.la \
	$(am__DEPENDENCIES_1)
am__main_testStrPR_SOURCES_DIST = main_testStrPR.cpp testStrPR.h \
	testStrPR.cpp
am_main_testStrPR_OBJECTS =  \
	main_testStrPR.$(OBJEXT) \
	testStrPR.$(OBJEXT)
main_testStrPR_OBJECTS = $(am_main_testStrPR_OBJECTS)
main_testStrPR_LDADD = $(LDADD)
main_testStrPR_DEPENDENCIES =  \
	$(top_builddir)/src/libfmpt.la \
	$(am__DEPENDENCIES_1)
am__main_testStrings_SOURCES_DIST = main_testStrings.cpp testStrings.h \
	testStrings.cpp
am_main_testStrings_OBJECTS =  \
	main_testStrings.$(OBJEXT) \
	testStrings.$(OBJEXT)
main_testStrings_OBJECTS = $(am_main_testStrings_OBJECTS)
main_testStrings_LDADD = $(LDADD)
main_testStrings_DEPENDENCIES =  \
	$(top_builddir)/src/libfmpt.la \
	$(am__DEPENDENCIES_1)
am__main_testTelescopeProjectionModel_SOURCES_DIST =  \
	main_testTelescopeProjectionModel.cpp \
	testTelescopeProjectionModel.h \
	testTelescopeProjectionModel.cpp
am_main_testTelescopeProjectionModel_OBJECTS = main_testTelescopeProjectionModel.$(OBJEXT) \
	testTelescopeProjectionModel.$(OBJEXT)
main_testTelescopeProjectionModel_OBJECTS =  \
	$(am_main_testTelescopeProjectionModel_OBJECTS)
main_testTelescopeProjectionModel_LDADD = $(LDADD)
main_testTelescopeProjectionModel_DEPENDENCIES =  \
	$(top_builddir)/src/libfmpt.la \
	$(am__DEPENDENCIES_1)
am__main_testTextFile_SOURCES_DIST = main_testTextFile.cpp \
	testTextFile.h testTextFile.cpp
am_main_testTextFile_OBJECTS =  \
	main_testTextFile.$(OBJEXT) \
	testTextFile.$(OBJEXT)
main_testTextFile_OBJECTS = $(am_main_testTextFile_OBJECTS)
main_testTextFile_LDADD = $(LDADD)
main_testTextFile_DEPENDENCIES =  \
	$(top_builddir)/src/libfmpt.la \
	$(am__DEPENDENCIES_1)
am__main_testTile_SOURCES_DIST = main_testTile.cpp testTile.h \
	testTile.cpp
am_main_testTile_OBJECTS =  \
	main_testTile.$(OBJEXT) testTile.$(OBJEXT)
main_testTile_OBJECTS = $(am_main_testTile_OBJECTS)
main_testTile_LDADD = $(LDADD)
main_testTile_DEPENDENCIES =  \
	$(top_builddir)/src/libfmpt.la \
	$(am__DEPENDENCIES_1)
am__main_testVCLemu_SOURCES_DIST = main_testVCLemu.cpp testVCLemu.h \
	testVCLemu.cpp
am_main_testVCLemu_OBJECTS =  \
	main_testVCLemu.$(OBJEXT) \
	testVCLemu.$(OBJEXT)
main_testVCLemu_OBJECTS = $(am_main_testVCLemu_OBJECTS)
main_testVCLemu_LDADD = $(LDADD)
main_testVCLemu_DEPENDENCIES =  \
	$(top_builddir)/src/libfmpt.la \
	$(am__DEPENDENCIES_1)
am__main_testVector_SOURCES_DIST = main_testVector.cpp testVector.h \
	testVector.cpp
am_main_testVector_OBJECTS =  \
	main_testVector.$(OBJEXT) \
	testVector.$(OBJEXT)
main_testVector_OBJECTS = $(am_main_testVector_OBJECTS)
main_testVector_LDADD = $(LDADD)
main_testVector_DEPENDENCIES =  \
	$(top_builddir)/src/libfmpt.la \
	$(am__DEPENDENCIES_1)
am__main_testVectors_SOURCES_DIST = main_testVectors.cpp testVectors.h \
	testVectors.cpp
am_main_testVectors_OBJECTS =  \
	main_testVectors.$(OBJEXT) \
	testVectors.$(OBJEXT)
main_testVectors_OBJECTS = $(am_main_testVectors_OBJECTS)
main_testVectors_LDADD = $(LDADD)
main_testVectors_DEPENDENCIES =  \
	$(top_builddir)/src/libfmpt.la \
	$(am__DEPENDENCIES_1)
am__dist_check_SCRIPTS_DIST = no_tests.sh
AM_V_P = $(am__v_P_$(V))
am__v_P_ = $(am__v_P_$(AM_DEFAULT_VERBOSITY))
am__v_P_0 = false
am__v_P_1 = :
AM_V_GEN = $(am__v_GEN_$(V))
am__v_GEN_ = $(am__v_GEN_$(AM_DEFAULT_VERBOSITY))
am__v_GEN_0 = @echo "  GEN     " $@;
am__v_GEN_1 = 
AM_V_at = $(am__v_at_$(V))
am__v_at_ = $(am__v_at_$(AM_DEFAULT_VERBOSITY))
am__v_at_0 = @
am__v_at_1 = 
DEFAULT_INCLUDES = -I. -I$(top_builddir)
depcomp = $(SHELL) $(top_srcdir)/depcomp
am__depfiles_maybe = depfiles
am__mv = mv -f
CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
LTCXXCOMPILE = $(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) \
	$(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) \
	$(AM_CXXFLAGS) $(CXXFLAGS)
AM_V_CXX = $(am__v_CXX_$(V))
am__v_CXX_ = $(am__v_CXX_$(AM_DEFAULT_VERBOSITY))
am__v_CXX_0 = @echo "  CXX     " $@;
am__v_CXX_1 = 
CXXLD = $(CXX)
CXXLINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=link $(CXXLD) $(AM_CXXFLAGS) \
	$(CXXFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@
AM_V_CXXLD = $(am__v_CXXLD_$(V))
am__v_CXXLD_ = $(am__v_CXXLD_$(AM_DEFAULT_VERBOSITY))
am__v_CXXLD_0 = @echo "  CXXLD   " $@;
am__v_CXXLD_1 = 
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
LTCOMPILE = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) \
	$(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) \
	$(AM_CFLAGS) $(CFLAGS)
AM_V_CC = $(am__v_CC_$(V))
am__v_CC_ = $(am__v_CC_$(AM_DEFAULT_VERBOSITY))
am__v_CC_0 = @echo "  CC      " $@;
am__v_CC_1 = 
CCLD = $(CC)
LINK = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) \
	$(AM_LDFLAGS) $(LDFLAGS) -o $@
AM_V_CCLD = $(am__v_CCLD_$(V))
am__v_CCLD_ = $(am__v_CCLD_$(AM_DEFAULT_VERBOSITY))
am__v_CCLD_0 = @echo "  CCLD    " $@;
am__v_CCLD_1 = 
SOURCES = $(main_testActuator_SOURCES) $(main_testAllocation_SOURCES) \
	$(main_testAllocationList_SOURCES) $(main_testArm_SOURCES) \
	$(main_testBarrier_SOURCES) $(main_testCilinder_SOURCES) \
	$(main_testComposedMotionFunction_SOURCES) \
	$(main_testContourFigureList_SOURCES) \
	$(main_testExceptions_SOURCES) \
	$(main_testExclusionArea_SOURCES) \
	$(main_testExclusionAreaList_SOURCES) \
	$(main_testFMOSATable_SOURCES) \
	$(main_testFiberConnectionModel_SOURCES) \
	$(main_testFiberMOSModel_SOURCES) $(main_testFigure_SOURCES) \
	$(main_testFileMethods_SOURCES) $(main_testFunction_SOURCES) \
	$(main_testGeometry_SOURCES) $(main_testInstruction_SOURCES) \
	$(main_testItemsList_SOURCES) \
	$(main_testMessageInstruction_SOURCES) \
	$(main_testMotionFunction_SOURCES) \
	$(main_testMotionProgram_SOURCES) \
	$(main_testMotionProgramGenerator_SOURCES) \
	$(main_testMotionProgramValidator_SOURCES) \
	$(main_testOutputs_SOURCES) \
	$(main_testPairPositionAngles_SOURCES) \
	$(main_testPointersList_SOURCES) \
	$(main_testPointersSlideArray_SOURCES) \
	$(main_testPositionerCenter_SOURCES) \
	$(main_testProjectionPoint_SOURCES) \
	$(main_testQuantificator_SOURCES) \
	$(main_testRampFunction_SOURCES) \
	$(main_testRoboticPositioner_SOURCES) \
	$(main_testRoboticPositionerList1_SOURCES) \
	$(main_testRoboticPositionerList2_SOURCES) \
	$(main_testRoboticPositionerList3_SOURCES) \
	$(main_testScalars_SOURCES) $(main_testSkyPoint_SOURCES) \
	$(main_testSlideArray_SOURCES) \
	$(main_testSquareFunction_SOURCES) $(main_testStrPR_SOURCES) \
	$(main_testStrings_SOURCES) \
	$(main_testTelescopeProjectionModel_SOURCES) \
	$(main_testTextFile_SOURCES) $(main_testTile_SOURCES) \
	$(main_testVCLemu_SOURCES) $(main_testVector_SOURCES) \
	$(main_testVectors_SOURCES)
DIST_SOURCES = $(am__main_testActuator_SOURCES_DIST) \
	$(am__main_testAllocation_SOURCES_DIST) \
	$(am__main_testAllocationList_SOURCES_DIST) \
	$(am__main_testArm_SOURCES_DIST) \
	$(am__main_testBarrier_SOURCES_DIST) \
	$(am__main_testCilinder_SOURCES_DIST) \
	$(am__main_testComposedMotionFunction_SOURCES_DIST) \
	$(am__main_testContourFigureList_SOURCES_DIST) \
	$(am__main_testExceptions_SOURCES_DIST) \
	$(am__main_testExclusionArea_SOURCES_DIST) \
	$(am__main_testExclusionAreaList_SOURCES_DIST) \
	$(am__main_testFMOSATable_SOURCES_DIST) \
	$(am__main_testFiberConnectionModel_SOURCES_DIST) \
	$(am__main_testFiberMOSModel_SOURCES_DIST) \
	$(am__main_testFigure_SOURCES_DIST) \
	$(am__main_testFileMethods_SOURCES_DIST) \
	$(am__main_testFunction_SOURCES_DIST) \
	$(am__main_testGeometry_SOURCES_DIST) \
	$(am__main_testInstruction_SOURCES_DIST) \
	$(am__main_testItemsList_SOURCES_DIST) \
	$(am__main_testMessageInstruction_SOURCES_DIST) \
	$(am__main_testMotionFunction_SOURCES_DIST) \
	$(am__main_testMotionProgram_SOURCES_DIST) \
	$(am__main_testMotionProgramGenerator_SOURCES_DIST) \
	$(am__main_testMotionProgramValidator_SOURCES_DIST) \
	$(am__main_testOutputs_SOURCES_DIST) \
	$(am__main_testPairPositionAngles_SOURCES_DIST) \
	$(am__main_testPointersList_SOURCES_DIST) \
	$(am__main_testPointersSlideArray_SOURCES_DIST) \
	$(am__main_testPositionerCenter_SOURCES_DIST) \
	$(am__main_testProjectionPoint_SOURCES_DIST) \
	$(am__main_testQuantificator_SOURCES_DIST) \
	$(am__main_testRampFunction_SOURCES_DIST) \
	$(am__main_testRoboticPositioner_SOURCES_DIST) \
	$(am__main_testRoboticPositionerList1_SOURCES_DIST) \
	$(am__main_testRoboticPositionerList2_SOURCES_DIST) \
	$(am__main_testRoboticPositionerList3_SOURCES_DIST) \
	$(am__main_testScalars_SOURCES_DIST) \
	$(am__main_testSkyPoint_SOURCES_DIST) \
	$(am__main_testSlideArray_SOURCES_DIST) \
	$(am__main_testSquareFunction_SOURCES_DIST) \
	$(am__main_testStrPR_SOURCES_DIST) \
	$(am__main_testStrings_SOURCES_DIST) \
	$(am__main_testTelescopeProjectionModel_SOURCES_DIST) \
	$(am__main_testTextFile_SOURCES_DIST) \
	$(am__main_testTile_SOURCES_DIST) \
	$(am__main_testVCLemu_SOURCES_DIST) \
	$(am__main_testVector_SOURCES_DIST) \
	$(am__main_testVectors_SOURCES_DIST)
am__can_run_installinfo = \
  case $$AM_UPDATE_INFO_DIR in \
    n|no|NO) false;; \
    *) (install-info --version) >/dev/null 2>&1;; \
  esac
am__tagged_files = $(HEADERS) $(SOURCES) $(TAGS_FILES) $(LISP)
# Read a list of newline-separated strings from the standard input,
# and print each of them once, without duplicates.  Input order is
# *not* preserved.
am__uniquify_input = $(AWK) '\
  BEGIN { nonempty = 0; } \
  { items[$$0] = 1; nonempty = 1; } \
  END { if (nonempty) { for (i in items) print i; }; } \
'
# Make sure the list of sources is unique.  This is necessary because,
# e.g., the same source file might be shared among _SOURCES variables
# for different programs/libraries.
am__define_uniq_tagged_files = \
  list='$(am__tagged_files)'; \
  unique=`for i in $$list; do \
    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
  done | $(am__uniquify_input)`
ETAGS = etags
CTAGS = ctags
am__tty_colors_dummy = \
  mgn= red= grn= lgn= blu= brg= std=; \
  am__color_tests=no
am__tty_colors = { \
  $(am__tty_colors_dummy); \
  if test "X$(AM_COLOR_TESTS)" = Xno; then \
    am__color_tests=no; \
  elif test "X$(AM_COLOR_TESTS)" = Xalways; then \
    am__color_tests=yes; \
  elif test "X$$TERM" != Xdumb && { test -t 1; } 2>/dev/null; then \
    am__color_tests=yes; \
  fi; \
  if test $$am__color_tests = yes; then \
    red='[0;31m'; \
    grn='[0;32m'; \
    lgn='[1;32m'; \
    blu='[1;34m'; \
    mgn='[0;35m'; \
    brg='[1m'; \
    std='[m'; \
  fi; \
}
am__vpath_adj_setup = srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`;
am__vpath_adj = case $$p in \
    $(srcdir)/*) f=`echo "$$p" | sed "s|^$$srcdirstrip/||"`;; \
    *) f=$$p;; \
  esac;
am__strip_dir = f=`echo $$p | sed -e 's|^.*/||'`;
am__install_max = 40
am__nobase_strip_setup = \
  srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*|]/\\\\&/g'`
am__nobase_strip = \
  for p in $$list; do echo "$$p"; done | sed -e "s|$$srcdirstrip/||"
am__nobase_list = $(am__nobase_strip_setup); \
  for p in $$list; do echo "$$p $$p"; done | \
  sed "s| $$srcdirstrip/| |;"' / .*\//!s/ .*/ ./; s,\( .*\)/[^/]*$$,\1,' | \
  $(AWK) 'BEGIN { files["."] = "" } { files[$$2] = files[$$2] " " $$1; \
    if (++n[$$2] == $(am__install_max)) \
      { print $$2, files[$$2]; n[$$2] = 0; files[$$2] = "" } } \
    END { for (dir in files) print dir, files[dir] }'
am__base_list = \
  sed '$$!N;$$!N;$$!N;$$!N;$$!N;$$!N;$$!N;s/\n/ /g' | \
  sed '$$!N;$$!N;$$!N;$$!N;s/\n/ /g'
am__uninstall_files_from_dir = { \
  test -z "$$files" \
    || { test ! -d "$$dir" && test ! -f "$$dir" && test ! -r "$$dir"; } \
    || { echo " ( cd '$$dir' && rm -f" $$files ")"; \
         $(am__cd) "$$dir" && rm -f $$files; }; \
  }
am__recheck_rx = ^[ 	]*:recheck:[ 	]*
am__global_test_result_rx = ^[ 	]*:global-test-result:[ 	]*
am__copy_in_global_log_rx = ^[ 	]*:copy-in-global-log:[ 	]*
# A command that, given a newline-separated list of test names on the
# standard input, print the name of the tests that are to be re-run
# upon "make recheck".
am__list_recheck_tests = $(AWK) '{ \
  recheck = 1; \
  while ((rc = (getline line < ($$0 ".trs"))) != 0) \
    { \
      if (rc < 0) \
        { \
          if ((getline line2 < ($$0 ".log")) < 0) \
	    recheck = 0; \
          break; \
        } \
      else if (line ~ /$(am__recheck_rx)[nN][Oo]/) \
        { \
          recheck = 0; \
          break; \
        } \
      else if (line ~ /$(am__recheck_rx)[yY][eE][sS]/) \
        { \
          break; \
        } \
    }; \
  if (recheck) \
    print $$0; \
  close ($$0 ".trs"); \
  close ($$0 ".log"); \
}'
# A command that, given a newline-separated list of test names on the
# standard input, create the global log from their .trs and .log files.
am__create_global_log = $(AWK) ' \
function fatal(msg) \
{ \
  print "fatal: making $@: " msg | "cat >&2"; \
  exit 1; \
} \
function rst_section(header) \
{ \
  print header; \
  len = length(header); \
  for (i = 1; i <= len; i = i + 1) \
    printf "="; \
  printf "\n\n"; \
} \
{ \
  copy_in_global_log = 1; \
  global_test_result = "RUN"; \
  while ((rc = (getline line < ($$0 ".trs"))) != 0) \
    { \
      if (rc < 0) \
         fatal("failed to read from " $$0 ".trs"); \
      if (line ~ /$(am__global_test_result_rx)/) \
        { \
          sub("$(am__global_test_result_rx)", "", line); \
          sub("[ 	]*$$", "", line); \
          global_test_result = line; \
        } \
      else if (line ~ /$(am__copy_in_global_log_rx)[nN][oO]/) \
        copy_in_global_log = 0; \
    }; \
  if (copy_in_global_log) \
    { \
      rst_section(global_test_result ": " $$0); \
      while ((rc = (getline line < ($$0 ".log"))) != 0) \
      { \
        if (rc < 0) \
          fatal("failed to read from " $$0 ".log"); \
        print line; \
      }; \
      printf "\n"; \
    }; \
  close ($$0 ".trs"); \
  close ($$0 ".log"); \
}'
# Restructured Text title.
am__rst_title = { sed 's/.*/   &   /;h;s/./=/g;p;x;s/ *$$//;p;g' && echo; }
# Solaris 10 'make', and several other traditional 'make' implementations,
# pass "-e" to $(SHELL), and POSIX 2008 even requires this.  Work around it
# by disabling -e (using the XSI extension "set +e") if it's set.
am__sh_e_setup = case $$- in *e*) set +e;; esac
# Default flags passed to test drivers.
am__common_driver_flags = \
  --color-tests "$$am__color_tests" \
  --enable-hard-errors "$$am__enable_hard_errors" \
  --expect-failure "$$am__expect_failure"
# To be inserted before the command running the test.  Creates the
# directory for the log if needed.  Stores in $dir the directory
# containing $f, in $tst the test, in $log the log.  Executes the
# developer- defined test setup AM_TESTS_ENVIRONMENT (if any), and
# passes TESTS_ENVIRONMENT.  Set up options for the wrapper that
# will run the test scripts (or their associated LOG_COMPILER, if
# thy have one).
am__check_pre = \
$(am__sh_e_setup);					\
$(am__vpath_adj_setup) $(am__vpath_adj)			\
$(am__tty_colors);					\
srcdir=$(srcdir); export srcdir;			\
case "$@" in						\
  */*) am__odir=`echo "./$@" | sed 's|/[^/]*$$||'`;;	\
    *) am__odir=.;; 					\
esac;							\
test "x$$am__odir" = x"." || test -d "$$am__odir" 	\
  || $(MKDIR_P) "$$am__odir" || exit $$?;		\
if test -f "./$$f"; then dir=./;			\
elif test -f "$$f"; then dir=;				\
else dir="$(srcdir)/"; fi;				\
tst=$$dir$$f; log='$@'; 				\
if test -n '$(DISABLE_HARD_ERRORS)'; then		\
  am__enable_hard_errors=no; 				\
else							\
  am__enable_hard_errors=yes; 				\
fi; 							\
case " $(XFAIL_TESTS) " in				\
  *[\ \	]$$f[\ \	]* | *[\ \	]$$dir$$f[\ \	]*) \
    am__expect_failure=yes;;				\
  *)							\
    am__expect_failure=no;;				\
esac; 							\
$(AM_TESTS_ENVIRONMENT) $(TESTS_ENVIRONMENT)
# A shell command to get the names of the tests scripts with any registered
# extension removed (i.e., equivalently, the names of the test logs, with
# the '.log' extension removed).  The result is saved in the shell variable
# '$bases'.  This honors runtime overriding of TESTS and TEST_LOGS.  Sadly,
# we cannot use something simpler, involving e.g., "$(TEST_LOGS:.log=)",
# since that might cause problem with VPATH rewrites for suffix-less tests.
# See also 'test-harness-vpath-rewrite.sh' and 'test-trs-basic.sh'.
am__set_TESTS_bases = \
  bases='$(TEST_LOGS)'; \
  bases=`for i in $$bases; do echo $$i; done | sed 's/\.log$$//'`; \
  bases=`echo $$bases`
RECHECK_LOGS = $(TEST_LOGS)
AM_RECURSIVE_TARGETS = check recheck
TEST_SUITE_LOG = test-suite.log
TEST_EXTENSIONS =  .test
LOG_DRIVER = $(SHELL) $(top_srcdir)/test-driver
LOG_COMPILE = $(LOG_COMPILER) $(AM_LOG_FLAGS) $(LOG_FLAGS)
am__set_b = \
  case '$@' in \
    */*) \
      case '$*' in \
        */*) b='$*';; \
          *) b=`echo '$@' | sed 's/\.log$$//'`; \
       esac;; \
    *) \
      b='$*';; \
  esac
am__test_logs1 = $(TESTS:=.log)
am__test_logs2 = $(am__test_logs1:.log=.log)
TEST_LOGS = $(am__test_logs2:.test.log=.log)
TEST_LOG_DRIVER = $(SHELL) $(top_srcdir)/test-driver
TEST_LOG_COMPILE = $(TEST_LOG_COMPILER) $(AM_TEST_LOG_FLAGS) \
	$(TEST_LOG_FLAGS)
am__DIST_COMMON = $(srcdir)/Makefile.in $(top_srcdir)/depcomp \
	$(top_srcdir)/test-driver
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = ${SHELL} /home/user/MEGARA/megarafmpt/missing aclocal-1.15
AMTAR = $${TAR-tar}
AM_DEFAULT_VERBOSITY = 1
AR = ar
AUTOCONF = ${SHELL} /home/user/MEGARA/megarafmpt/missing autoconf
AUTOHEADER = ${SHELL} /home/user/MEGARA/megarafmpt/missing autoheader
AUTOMAKE = ${SHELL} /home/user/MEGARA/megarafmpt/missing automake-1.15
AWK = mawk
CC = gcc
CCDEPMODE = depmode=gcc3
CFLAGS = -g -O2
CPP = gcc -E
CPPFLAGS = 
CPPUNIT_CFLAGS = 
CPPUNIT_LIBS = -lcppunit
CXX = g++
CXXCPP = g++ -E
CXXDEPMODE = depmode=gcc3
CXXFLAGS = -g -O2
CYGPATH_W = echo
DEFS = -DHAVE_CONFIG_H
DEPDIR = .deps
DLLTOOL = false
DSYMUTIL = 
DUMPBIN = 
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EGREP = /bin/grep -E
EXEEXT = 
FGREP = /bin/grep -F
GREP = /bin/grep
INSTALL = /usr/bin/install -c
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = $(install_sh) -c -s
LD = /usr/bin/ld -m elf_x86_64
LDFLAGS = 
LIBOBJS = 
LIBS = 
LIBTOOL = $(SHELL) $(top_builddir)/libtool
LIPO = 
LN_S = ln -s
LTLIBOBJS = 
LT_SYS_LIBRARY_PATH = 
MAKEINFO = ${SHELL} /home/user/MEGARA/megarafmpt/missing makeinfo
MANIFEST_TOOL = :
MKDIR_P = /bin/mkdir -p
NM = /usr/bin/nm -B
NMEDIT = 
OBJDUMP = objdump
OBJEXT = o
OTOOL = 
OTOOL64 = 
PACKAGE = megara-fmpt
PACKAGE_BUGREPORT = 
PACKAGE_NAME = megara-fmpt
PACKAGE_STRING = megara-fmpt 3.9.3
PACKAGE_TARNAME = megara-fmpt
PACKAGE_URL = 
PACKAGE_VERSION = 3.9.3
PATH_SEPARATOR = :
PKG_CONFIG = /usr/bin/pkg-config
PKG_CONFIG_LIBDIR = 
PKG_CONFIG_PATH = 
RANLIB = ranlib
SED = /bin/sed
SET_MAKE = 
SHELL = /bin/bash
STRIP = strip
VERSION = 3.9.3
abs_builddir = /home/user/MEGARA/megarafmpt/tests
abs_srcdir = /home/user/MEGARA/megarafmpt/tests
abs_top_builddir = /home/user/MEGARA/megarafmpt
abs_top_srcdir = /home/user/MEGARA/megarafmpt
ac_ct_AR = ar
ac_ct_CC = gcc
ac_ct_CXX = g++
ac_ct_DUMPBIN = 
am__include = include
am__leading_dot = .
am__quote = 
am__tar = $${TAR-tar} chof - "$$tardir"
am__untar = $${TAR-tar} xf -
bindir = ${exec_prefix}/bin
build = x86_64-pc-linux-gnu
build_alias = 
build_cpu = x86_64
build_os = linux-gnu
build_vendor = pc
builddir = .
datadir = ${datarootdir}
datarootdir = ${prefix}/share
docdir = ${datarootdir}/doc/${PACKAGE_TARNAME}
dvidir = ${docdir}
exec_prefix = ${prefix}
host = x86_64-pc-linux-gnu
host_alias = 
host_cpu = x86_64
host_os = linux-gnu
host_vendor = pc
htmldir = ${docdir}
includedir = ${prefix}/include
infodir = ${datarootdir}/info
install_sh = ${SHELL} /home/user/MEGARA/megarafmpt/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localedir = ${datarootdir}/locale
localstatedir = ${prefix}/var
mandir = ${datarootdir}/man
mkdir_p = $(MKDIR_P)
oldincludedir = /usr/include
pdfdir = ${docdir}
prefix = /usr/local
program_transform_name = s,x,x,
psdir = ${docdir}
runstatedir = ${localstatedir}/run
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
srcdir = .
sysconfdir = ${prefix}/etc
target_alias = 
top_build_prefix = ../
top_builddir = ..
top_srcdir = ..
main_testVCLemu_SOURCES = main_testVCLemu.cpp testVCLemu.h testVCLemu.cpp
main_testExceptions_SOURCES = main_testExceptions.cpp testExceptions.h testExceptions.cpp
main_testScalars_SOURCES = main_testScalars.cpp testScalars.h testScalars.cpp
main_testVectors_SOURCES = main_testVectors.cpp testVectors.h testVectors.cpp
main_testGeometry_SOURCES = main_testGeometry.cpp testGeometry.h testGeometry.cpp
main_testStrings_SOURCES = main_testStrings.cpp testStrings.h testStrings.cpp
main_testStrPR_SOURCES = main_testStrPR.cpp testStrPR.h testStrPR.cpp
main_testTextFile_SOURCES = main_testTextFile.cpp testTextFile.h testTextFile.cpp
main_testSlideArray_SOURCES = main_testSlideArray.cpp testSlideArray.h testSlideArray.cpp
main_testPointersSlideArray_SOURCES = main_testPointersSlideArray.cpp testPointersSlideArray.h testPointersSlideArray.cpp
main_testItemsList_SOURCES = main_testItemsList.cpp testItemsList.h testItemsList.cpp
main_testPointersList_SOURCES = main_testPointersList.cpp testPointersList.h testPointersList.cpp
main_testVector_SOURCES = main_testVector.cpp testVector.h testVector.cpp
main_testQuantificator_SOURCES = main_testQuantificator.cpp testQuantificator.h testQuantificator.cpp
main_testFunction_SOURCES = main_testFunction.cpp testFunction.h testFunction.cpp
main_testMotionFunction_SOURCES = main_testMotionFunction.cpp testMotionFunction.h testMotionFunction.cpp
main_testSquareFunction_SOURCES = main_testSquareFunction.cpp testSquareFunction.h testSquareFunction.cpp
main_testRampFunction_SOURCES = main_testRampFunction.cpp testRampFunction.h testRampFunction.cpp
main_testComposedMotionFunction_SOURCES = main_testComposedMotionFunction.cpp testComposedMotionFunction.h testComposedMotionFunction.cpp
main_testFigure_SOURCES = main_testFigure.cpp testFigure.h testFigure.cpp
main_testContourFigureList_SOURCES = main_testContourFigureList.cpp testContourFigureList.h testContourFigureList.cpp
main_testBarrier_SOURCES = main_testBarrier.cpp testBarrier.h testBarrier.cpp
main_testExclusionArea_SOURCES = main_testExclusionArea.cpp testExclusionArea.h testExclusionArea.cpp
main_testExclusionAreaList_SOURCES = main_testExclusionAreaList.cpp testExclusionAreaList.h testExclusionAreaList.cpp
main_testInstruction_SOURCES = main_testInstruction.cpp testInstruction.h testInstruction.cpp
main_testMessageInstruction_SOURCES = main_testMessageInstruction.cpp testMessageInstruction.h testMessageInstruction.cpp
main_testPairPositionAngles_SOURCES = main_testPairPositionAngles.cpp testPairPositionAngles.h testPairPositionAngles.cpp
main_testMotionProgram_SOURCES = main_testMotionProgram.cpp testMotionProgram.h testMotionProgram.cpp
main_testArm_SOURCES = main_testArm.cpp testArm.h testArm.cpp
main_testCilinder_SOURCES = main_testCilinder.cpp testCilinder.h testCilinder.cpp
main_testActuator_SOURCES = main_testActuator.cpp testActuator.h testActuator.cpp
main_testRoboticPositioner_SOURCES = main_testRoboticPositioner.cpp testRoboticPositioner.h testRoboticPositioner.cpp
main_testRoboticPositionerList1_SOURCES = main_testRoboticPositionerList1.cpp testRoboticPositionerList1.h testRoboticPositionerList1.cpp
main_testRoboticPositionerList2_SOURCES = main_testRoboticPositionerList2.cpp testRoboticPositionerList2.h testRoboticPositionerList2.cpp
main_testRoboticPositionerList3_SOURCES = main_testRoboticPositionerList3.cpp testRoboticPositionerList3.h testRoboticPositionerList3.cpp
main_testFiberMOSModel_SOURCES = main_testFiberMOSModel.cpp testFiberMOSModel.h testFiberMOSModel.cpp
main_testFiberConnectionModel_SOURCES = main_testFiberConnectionModel.cpp testFiberConnectionModel.h testFiberConnectionModel.cpp
main_testSkyPoint_SOURCES = main_testSkyPoint.cpp testSkyPoint.h testSkyPoint.cpp
main_testProjectionPoint_SOURCES = main_testProjectionPoint.cpp testProjectionPoint.h testProjectionPoint.cpp
main_testTile_SOURCES = main_testTile.cpp testTile.h testTile.cpp
main_testTelescopeProjectionModel_SOURCES = main_testTelescopeProjectionModel.cpp testTelescopeProjectionModel.h testTelescopeProjectionModel.cpp
main_testAllocation_SOURCES = main_testAllocation.cpp testAllocation.h testAllocation.cpp
main_testAllocationList_SOURCES = main_testAllocationList.cpp testAllocationList.h testAllocationList.cpp
main_testMotionProgramValidator_SOURCES = main_testMotionProgramValidator.cpp testMotionProgramValidator.h testMotionProgramValidator.cpp
main_testMotionProgramGenerator_SOURCES = main_testMotionProgramGenerator.cpp testMotionProgramGenerator.h testMotionProgramGenerator.cpp
main_testPositionerCenter_SOURCES = main_testPositionerCenter.cpp testPositionerCenter.h testPositionerCenter.cpp
main_testFileMethods_SOURCES = main_testFileMethods.cpp testFileMethods.h testFileMethods.cpp
main_testFMOSATable_SOURCES = main_testFMOSATable.cpp testFMOSATable.h testFMOSATable.cpp
main_testOutputs_SOURCES = main_testOutputs.cpp testOutputs.h testOutputs.cpp
AM_CPPFLAGS = -I$(top_srcdir) -I$(CPPUNIT_CFLAGS)
LDADD = $(top_builddir)/src/libfmpt.la $(CPPUNIT_LIBS)
#XFAIL_TESTS = no_tests.sh
#dist_check_SCRIPTS = no_tests.sh
all: all-am

.SUFFIXES:
.SUFFIXES: .cpp .lo .log .o .obj .test .test$(EXEEXT) .trs
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \
	        && { if test -f $@; then exit 0; else break; fi; }; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --foreign tests/Makefile'; \
	$(am__cd) $(top_srcdir) && \
	  $(AUTOMAKE) --foreign tests/Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(am__aclocal_m4_deps):

clean-checkPROGRAMS:
	@list='$(check_PROGRAMS)'; test -n "$$list" || exit 0; \
	echo " rm -f" $$list; \
	rm -f $$list || exit $$?; \
	test -n "$(EXEEXT)" || exit 0; \
	list=`for p in $$list; do echo "$$p"; done | sed 's/$(EXEEXT)$$//'`; \
	echo " rm -f" $$list; \
	rm -f $$list

main_testActuator$(EXEEXT): $(main_testActuator_OBJECTS) $(main_testActuator_DEPENDENCIES) $(EXTRA_main_testActuator_DEPENDENCIES) 
	@rm -f main_testActuator$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(main_testActuator_OBJECTS) $(main_testActuator_LDADD) $(LIBS)

main_testAllocation$(EXEEXT): $(main_testAllocation_OBJECTS) $(main_testAllocation_DEPENDENCIES) $(EXTRA_main_testAllocation_DEPENDENCIES) 
	@rm -f main_testAllocation$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(main_testAllocation_OBJECTS) $(main_testAllocation_LDADD) $(LIBS)

main_testAllocationList$(EXEEXT): $(main_testAllocationList_OBJECTS) $(main_testAllocationList_DEPENDENCIES) $(EXTRA_main_testAllocationList_DEPENDENCIES) 
	@rm -f main_testAllocationList$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(main_testAllocationList_OBJECTS) $(main_testAllocationList_LDADD) $(LIBS)

main_testArm$(EXEEXT): $(main_testArm_OBJECTS) $(main_testArm_DEPENDENCIES) $(EXTRA_main_testArm_DEPENDENCIES) 
	@rm -f main_testArm$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(main_testArm_OBJECTS) $(main_testArm_LDADD) $(LIBS)

main_testBarrier$(EXEEXT): $(main_testBarrier_OBJECTS) $(main_testBarrier_DEPENDENCIES) $(EXTRA_main_testBarrier_DEPENDENCIES) 
	@rm -f main_testBarrier$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(main_testBarrier_OBJECTS) $(main_testBarrier_LDADD) $(LIBS)

main_testCilinder$(EXEEXT): $(main_testCilinder_OBJECTS) $(main_testCilinder_DEPENDENCIES) $(EXTRA_main_testCilinder_DEPENDENCIES) 
	@rm -f main_testCilinder$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(main_testCilinder_OBJECTS) $(main_testCilinder_LDADD) $(LIBS)

main_testComposedMotionFunction$(EXEEXT): $(main_testComposedMotionFunction_OBJECTS) $(main_testComposedMotionFunction_DEPENDENCIES) $(EXTRA_main_testComposedMotionFunction_DEPENDENCIES) 
	@rm -f main_testComposedMotionFunction$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(main_testComposedMotionFunction_OBJECTS) $(main_testComposedMotionFunction_LDADD) $(LIBS)

main_testContourFigureList$(EXEEXT): $(main_testContourFigureList_OBJECTS) $(main_testContourFigureList_DEPENDENCIES) $(EXTRA_main_testContourFigureList_DEPENDENCIES) 
	@rm -f main_testContourFigureList$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(main_testContourFigureList_OBJECTS) $(main_testContourFigureList_LDADD) $(LIBS)

main_testExceptions$(EXEEXT): $(main_testExceptions_OBJECTS) $(main_testExceptions_DEPENDENCIES) $(EXTRA_main_testExceptions_DEPENDENCIES) 
	@rm -f main_testExceptions$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(main_testExceptions_OBJECTS) $(main_testExceptions_LDADD) $(LIBS)

main_testExclusionArea$(EXEEXT): $(main_testExclusionArea_OBJECTS) $(main_testExclusionArea_DEPENDENCIES) $(EXTRA_main_testExclusionArea_DEPENDENCIES) 
	@rm -f main_testExclusionArea$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(main_testExclusionArea_OBJECTS) $(main_testExclusionArea_LDADD) $(LIBS)

main_testExclusionAreaList$(EXEEXT): $(main_testExclusionAreaList_OBJECTS) $(main_testExclusionAreaList_DEPENDENCIES) $(EXTRA_main_testExclusionAreaList_DEPENDENCIES) 
	@rm -f main_testExclusionAreaList$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(main_testExclusionAreaList_OBJECTS) $(main_testExclusionAreaList_LDADD) $(LIBS)

main_testFMOSATable$(EXEEXT): $(main_testFMOSATable_OBJECTS) $(main_testFMOSATable_DEPENDENCIES) $(EXTRA_main_testFMOSATable_DEPENDENCIES) 
	@rm -f main_testFMOSATable$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(main_testFMOSATable_OBJECTS) $(main_testFMOSATable_LDADD) $(LIBS)

main_testFiberConnectionModel$(EXEEXT): $(main_testFiberConnectionModel_OBJECTS) $(main_testFiberConnectionModel_DEPENDENCIES) $(EXTRA_main_testFiberConnectionModel_DEPENDENCIES) 
	@rm -f main_testFiberConnectionModel$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(main_testFiberConnectionModel_OBJECTS) $(main_testFiberConnectionModel_LDADD) $(LIBS)

main_testFiberMOSModel$(EXEEXT): $(main_testFiberMOSModel_OBJECTS) $(main_testFiberMOSModel_DEPENDENCIES) $(EXTRA_main_testFiberMOSModel_DEPENDENCIES) 
	@rm -f main_testFiberMOSModel$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(main_testFiberMOSModel_OBJECTS) $(main_testFiberMOSModel_LDADD) $(LIBS)

main_testFigure$(EXEEXT): $(main_testFigure_OBJECTS) $(main_testFigure_DEPENDENCIES) $(EXTRA_main_testFigure_DEPENDENCIES) 
	@rm -f main_testFigure$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(main_testFigure_OBJECTS) $(main_testFigure_LDADD) $(LIBS)

main_testFileMethods$(EXEEXT): $(main_testFileMethods_OBJECTS) $(main_testFileMethods_DEPENDENCIES) $(EXTRA_main_testFileMethods_DEPENDENCIES) 
	@rm -f main_testFileMethods$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(main_testFileMethods_OBJECTS) $(main_testFileMethods_LDADD) $(LIBS)

main_testFunction$(EXEEXT): $(main_testFunction_OBJECTS) $(main_testFunction_DEPENDENCIES) $(EXTRA_main_testFunction_DEPENDENCIES) 
	@rm -f main_testFunction$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(main_testFunction_OBJECTS) $(main_testFunction_LDADD) $(LIBS)

main_testGeometry$(EXEEXT): $(main_testGeometry_OBJECTS) $(main_testGeometry_DEPENDENCIES) $(EXTRA_main_testGeometry_DEPENDENCIES) 
	@rm -f main_testGeometry$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(main_testGeometry_OBJECTS) $(main_testGeometry_LDADD) $(LIBS)

main_testInstruction$(EXEEXT): $(main_testInstruction_OBJECTS) $(main_testInstruction_DEPENDENCIES) $(EXTRA_main_testInstruction_DEPENDENCIES) 
	@rm -f main_testInstruction$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(main_testInstruction_OBJECTS) $(main_testInstruction_LDADD) $(LIBS)

main_testItemsList$(EXEEXT): $(main_testItemsList_OBJECTS) $(main_testItemsList_DEPENDENCIES) $(EXTRA_main_testItemsList_DEPENDENCIES) 
	@rm -f main_testItemsList$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(main_testItemsList_OBJECTS) $(main_testItemsList_LDADD) $(LIBS)

main_testMessageInstruction$(EXEEXT): $(main_testMessageInstruction_OBJECTS) $(main_testMessageInstruction_DEPENDENCIES) $(EXTRA_main_testMessageInstruction_DEPENDENCIES) 
	@rm -f main_testMessageInstruction$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(main_testMessageInstruction_OBJECTS) $(main_testMessageInstruction_LDADD) $(LIBS)

main_testMotionFunction$(EXEEXT): $(main_testMotionFunction_OBJECTS) $(main_testMotionFunction_DEPENDENCIES) $(EXTRA_main_testMotionFunction_DEPENDENCIES) 
	@rm -f main_testMotionFunction$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(main_testMotionFunction_OBJECTS) $(main_testMotionFunction_LDADD) $(LIBS)

main_testMotionProgram$(EXEEXT): $(main_testMotionProgram_OBJECTS) $(main_testMotionProgram_DEPENDENCIES) $(EXTRA_main_testMotionProgram_DEPENDENCIES) 
	@rm -f main_testMotionProgram$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(main_testMotionProgram_OBJECTS) $(main_testMotionProgram_LDADD) $(LIBS)

main_testMotionProgramGenerator$(EXEEXT): $(main_testMotionProgramGenerator_OBJECTS) $(main_testMotionProgramGenerator_DEPENDENCIES) $(EXTRA_main_testMotionProgramGenerator_DEPENDENCIES) 
	@rm -f main_testMotionProgramGenerator$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(main_testMotionProgramGenerator_OBJECTS) $(main_testMotionProgramGenerator_LDADD) $(LIBS)

main_testMotionProgramValidator$(EXEEXT): $(main_testMotionProgramValidator_OBJECTS) $(main_testMotionProgramValidator_DEPENDENCIES) $(EXTRA_main_testMotionProgramValidator_DEPENDENCIES) 
	@rm -f main_testMotionProgramValidator$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(main_testMotionProgramValidator_OBJECTS) $(main_testMotionProgramValidator_LDADD) $(LIBS)

main_testOutputs$(EXEEXT): $(main_testOutputs_OBJECTS) $(main_testOutputs_DEPENDENCIES) $(EXTRA_main_testOutputs_DEPENDENCIES) 
	@rm -f main_testOutputs$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(main_testOutputs_OBJECTS) $(main_testOutputs_LDADD) $(LIBS)

main_testPairPositionAngles$(EXEEXT): $(main_testPairPositionAngles_OBJECTS) $(main_testPairPositionAngles_DEPENDENCIES) $(EXTRA_main_testPairPositionAngles_DEPENDENCIES) 
	@rm -f main_testPairPositionAngles$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(main_testPairPositionAngles_OBJECTS) $(main_testPairPositionAngles_LDADD) $(LIBS)

main_testPointersList$(EXEEXT): $(main_testPointersList_OBJECTS) $(main_testPointersList_DEPENDENCIES) $(EXTRA_main_testPointersList_DEPENDENCIES) 
	@rm -f main_testPointersList$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(main_testPointersList_OBJECTS) $(main_testPointersList_LDADD) $(LIBS)

main_testPointersSlideArray$(EXEEXT): $(main_testPointersSlideArray_OBJECTS) $(main_testPointersSlideArray_DEPENDENCIES) $(EXTRA_main_testPointersSlideArray_DEPENDENCIES) 
	@rm -f main_testPointersSlideArray$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(main_testPointersSlideArray_OBJECTS) $(main_testPointersSlideArray_LDADD) $(LIBS)

main_testPositionerCenter$(EXEEXT): $(main_testPositionerCenter_OBJECTS) $(main_testPositionerCenter_DEPENDENCIES) $(EXTRA_main_testPositionerCenter_DEPENDENCIES) 
	@rm -f main_testPositionerCenter$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(main_testPositionerCenter_OBJECTS) $(main_testPositionerCenter_LDADD) $(LIBS)

main_testProjectionPoint$(EXEEXT): $(main_testProjectionPoint_OBJECTS) $(main_testProjectionPoint_DEPENDENCIES) $(EXTRA_main_testProjectionPoint_DEPENDENCIES) 
	@rm -f main_testProjectionPoint$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(main_testProjectionPoint_OBJECTS) $(main_testProjectionPoint_LDADD) $(LIBS)

main_testQuantificator$(EXEEXT): $(main_testQuantificator_OBJECTS) $(main_testQuantificator_DEPENDENCIES) $(EXTRA_main_testQuantificator_DEPENDENCIES) 
	@rm -f main_testQuantificator$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(main_testQuantificator_OBJECTS) $(main_testQuantificator_LDADD) $(LIBS)

main_testRampFunction$(EXEEXT): $(main_testRampFunction_OBJECTS) $(main_testRampFunction_DEPENDENCIES) $(EXTRA_main_testRampFunction_DEPENDENCIES) 
	@rm -f main_testRampFunction$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(main_testRampFunction_OBJECTS) $(main_testRampFunction_LDADD) $(LIBS)

main_testRoboticPositioner$(EXEEXT): $(main_testRoboticPositioner_OBJECTS) $(main_testRoboticPositioner_DEPENDENCIES) $(EXTRA_main_testRoboticPositioner_DEPENDENCIES) 
	@rm -f main_testRoboticPositioner$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(main_testRoboticPositioner_OBJECTS) $(main_testRoboticPositioner_LDADD) $(LIBS)

main_testRoboticPositionerList1$(EXEEXT): $(main_testRoboticPositionerList1_OBJECTS) $(main_testRoboticPositionerList1_DEPENDENCIES) $(EXTRA_main_testRoboticPositionerList1_DEPENDENCIES) 
	@rm -f main_testRoboticPositionerList1$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(main_testRoboticPositionerList1_OBJECTS) $(main_testRoboticPositionerList1_LDADD) $(LIBS)

main_testRoboticPositionerList2$(EXEEXT): $(main_testRoboticPositionerList2_OBJECTS) $(main_testRoboticPositionerList2_DEPENDENCIES) $(EXTRA_main_testRoboticPositionerList2_DEPENDENCIES) 
	@rm -f main_testRoboticPositionerList2$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(main_testRoboticPositionerList2_OBJECTS) $(main_testRoboticPositionerList2_LDADD) $(LIBS)

main_testRoboticPositionerList3$(EXEEXT): $(main_testRoboticPositionerList3_OBJECTS) $(main_testRoboticPositionerList3_DEPENDENCIES) $(EXTRA_main_testRoboticPositionerList3_DEPENDENCIES) 
	@rm -f main_testRoboticPositionerList3$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(main_testRoboticPositionerList3_OBJECTS) $(main_testRoboticPositionerList3_LDADD) $(LIBS)

main_testScalars$(EXEEXT): $(main_testScalars_OBJECTS) $(main_testScalars_DEPENDENCIES) $(EXTRA_main_testScalars_DEPENDENCIES) 
	@rm -f main_testScalars$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(main_testScalars_OBJECTS) $(main_testScalars_LDADD) $(LIBS)

main_testSkyPoint$(EXEEXT): $(main_testSkyPoint_OBJECTS) $(main_testSkyPoint_DEPENDENCIES) $(EXTRA_main_testSkyPoint_DEPENDENCIES) 
	@rm -f main_testSkyPoint$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(main_testSkyPoint_OBJECTS) $(main_testSkyPoint_LDADD) $(LIBS)

main_testSlideArray$(EXEEXT): $(main_testSlideArray_OBJECTS) $(main_testSlideArray_DEPENDENCIES) $(EXTRA_main_testSlideArray_DEPENDENCIES) 
	@rm -f main_testSlideArray$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(main_testSlideArray_OBJECTS) $(main_testSlideArray_LDADD) $(LIBS)

main_testSquareFunction$(EXEEXT): $(main_testSquareFunction_OBJECTS) $(main_testSquareFunction_DEPENDENCIES) $(EXTRA_main_testSquareFunction_DEPENDENCIES) 
	@rm -f main_testSquareFunction$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(main_testSquareFunction_OBJECTS) $(main_testSquareFunction_LDADD) $(LIBS)

main_testStrPR$(EXEEXT): $(main_testStrPR_OBJECTS) $(main_testStrPR_DEPENDENCIES) $(EXTRA_main_testStrPR_DEPENDENCIES) 
	@rm -f main_testStrPR$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(main_testStrPR_OBJECTS) $(main_testStrPR_LDADD) $(LIBS)

main_testStrings$(EXEEXT): $(main_testStrings_OBJECTS) $(main_testStrings_DEPENDENCIES) $(EXTRA_main_testStrings_DEPENDENCIES) 
	@rm -f main_testStrings$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(main_testStrings_OBJECTS) $(main_testStrings_LDADD) $(LIBS)

main_testTelescopeProjectionModel$(EXEEXT): $(main_testTelescopeProjectionModel_OBJECTS) $(main_testTelescopeProjectionModel_DEPENDENCIES) $(EXTRA_main_testTelescopeProjectionModel_DEPENDENCIES) 
	@rm -f main_testTelescopeProjectionModel$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(main_testTelescopeProjectionModel_OBJECTS) $(main_testTelescopeProjectionModel_LDADD) $(LIBS)

main_testTextFile$(EXEEXT): $(main_testTextFile_OBJECTS) $(main_testTextFile_DEPENDENCIES) $(EXTRA_main_testTextFile_DEPENDENCIES) 
	@rm -f main_testTextFile$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(main_testTextFile_OBJECTS) $(main_testTextFile_LDADD) $(LIBS)

main_testTile$(EXEEXT): $(main_testTile_OBJECTS) $(main_testTile_DEPENDENCIES) $(EXTRA_main_testTile_DEPENDENCIES) 
	@rm -f main_testTile$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(main_testTile_OBJECTS) $(main_testTile_LDADD) $(LIBS)

main_testVCLemu$(EXEEXT): $(main_testVCLemu_OBJECTS) $(main_testVCLemu_DEPENDENCIES) $(EXTRA_main_testVCLemu_DEPENDENCIES) 
	@rm -f main_testVCLemu$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(main_testVCLemu_OBJECTS) $(main_testVCLemu_LDADD) $(LIBS)

main_testVector$(EXEEXT): $(main_testVector_OBJECTS) $(main_testVector_DEPENDENCIES) $(EXTRA_main_testVector_DEPENDENCIES) 
	@rm -f main_testVector$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(main_testVector_OBJECTS) $(main_testVector_LDADD) $(LIBS)

main_testVectors$(EXEEXT): $(main_testVectors_OBJECTS) $(main_testVectors_DEPENDENCIES) $(EXTRA_main_testVectors_DEPENDENCIES) 
	@rm -f main_testVectors$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(main_testVectors_OBJECTS) $(main_testVectors_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/main_testActuator.Po
include ./$(DEPDIR)/main_testAllocation.Po
include ./$(DEPDIR)/main_testAllocationList.Po
include ./$(DEPDIR)/main_testArm.Po
include ./$(DEPDIR)/main_testBarrier.Po
include ./$(DEPDIR)/main_testCilinder.Po
include ./$(DEPDIR)/main_testComposedMotionFunction.Po
include ./$(DEPDIR)/main_testContourFigureList.Po
include ./$(DEPDIR)/main_testExceptions.Po
include ./$(DEPDIR)/main_testExclusionArea.Po
include ./$(DEPDIR)/main_testExclusionAreaList.Po
include ./$(DEPDIR)/main_testFMOSATable.Po
include ./$(DEPDIR)/main_testFiberConnectionModel.Po
include ./$(DEPDIR)/main_testFiberMOSModel.Po
include ./$(DEPDIR)/main_testFigure.Po
include ./$(DEPDIR)/main_testFileMethods.Po
include ./$(DEPDIR)/main_testFunction.Po
include ./$(DEPDIR)/main_testGeometry.Po
include ./$(DEPDIR)/main_testInstruction.Po
include ./$(DEPDIR)/main_testItemsList.Po
include ./$(DEPDIR)/main_testMessageInstruction.Po
include ./$(DEPDIR)/main_testMotionFunction.Po
include ./$(DEPDIR)/main_testMotionProgram.Po
include ./$(DEPDIR)/main_testMotionProgramGenerator.Po
include ./$(DEPDIR)/main_testMotionProgramValidator.Po
include ./$(DEPDIR)/main_testOutputs.Po
include ./$(DEPDIR)/main_testPairPositionAngles.Po
include ./$(DEPDIR)/main_testPointersList.Po
include ./$(DEPDIR)/main_testPointersSlideArray.Po
include ./$(DEPDIR)/main_testPositionerCenter.Po
include ./$(DEPDIR)/main_testProjectionPoint.Po
include ./$(DEPDIR)/main_testQuantificator.Po
include ./$(DEPDIR)/main_testRampFunction.Po
include ./$(DEPDIR)/main_testRoboticPositioner.Po
include ./$(DEPDIR)/main_testRoboticPositionerList1.Po
include ./$(DEPDIR)/main_testRoboticPositionerList2.Po
include ./$(DEPDIR)/main_testRoboticPositionerList3.Po
include ./$(DEPDIR)/main_testScalars.Po
include ./$(DEPDIR)/main_testSkyPoint.Po
include ./$(DEPDIR)/main_testSlideArray.Po
include ./$(DEPDIR)/main_testSquareFunction.Po
include ./$(DEPDIR)/main_testStrPR.Po
include ./$(DEPDIR)/main_testStrings.Po
include ./$(DEPDIR)/main_testTelescopeProjectionModel.Po
include ./$(DEPDIR)/main_testTextFile.Po
include ./$(DEPDIR)/main_testTile.Po
include ./$(DEPDIR)/main_testVCLemu.Po
include ./$(DEPDIR)/main_testVector.Po
include ./$(DEPDIR)/main_testVectors.Po
include ./$(DEPDIR)/testActuator.Po
include ./$(DEPDIR)/testAllocation.Po
include ./$(DEPDIR)/testAllocationList.Po
include ./$(DEPDIR)/testArm.Po
include ./$(DEPDIR)/testBarrier.Po
include ./$(DEPDIR)/testCilinder.Po
include ./$(DEPDIR)/testComposedMotionFunction.Po
include ./$(DEPDIR)/testContourFigureList.Po
include ./$(DEPDIR)/testExceptions.Po
include ./$(DEPDIR)/testExclusionArea.Po
include ./$(DEPDIR)/testExclusionAreaList.Po
include ./$(DEPDIR)/testFMOSATable.Po
include ./$(DEPDIR)/testFiberConnectionModel.Po
include ./$(DEPDIR)/testFiberMOSModel.Po
include ./$(DEPDIR)/testFigure.Po
include ./$(DEPDIR)/testFileMethods.Po
include ./$(DEPDIR)/testFunction.Po
include ./$(DEPDIR)/testGeometry.Po
include ./$(DEPDIR)/testInstruction.Po
include ./$(DEPDIR)/testItemsList.Po
include ./$(DEPDIR)/testMessageInstruction.Po
include ./$(DEPDIR)/testMotionFunction.Po
include ./$(DEPDIR)/testMotionProgram.Po
include ./$(DEPDIR)/testMotionProgramGenerator.Po
include ./$(DEPDIR)/testMotionProgramValidator.Po
include ./$(DEPDIR)/testOutputs.Po
include ./$(DEPDIR)/testPairPositionAngles.Po
include ./$(DEPDIR)/testPointersList.Po
include ./$(DEPDIR)/testPointersSlideArray.Po
include ./$(DEPDIR)/testPositionerCenter.Po
include ./$(DEPDIR)/testProjectionPoint.Po
include ./$(DEPDIR)/testQuantificator.Po
include ./$(DEPDIR)/testRampFunction.Po
include ./$(DEPDIR)/testRoboticPositioner.Po
include ./$(DEPDIR)/testRoboticPositionerList1.Po
include ./$(DEPDIR)/testRoboticPositionerList2.Po
include ./$(DEPDIR)/testRoboticPositionerList3.Po
include ./$(DEPDIR)/testScalars.Po
include ./$(DEPDIR)/testSkyPoint.Po
include ./$(DEPDIR)/testSlideArray.Po
include ./$(DEPDIR)/testSquareFunction.Po
include ./$(DEPDIR)/testStrPR.Po
include ./$(DEPDIR)/testStrings.Po
include ./$(DEPDIR)/testTelescopeProjectionModel.Po
include ./$(DEPDIR)/testTextFile.Po
include ./$(DEPDIR)/testTile.Po
include ./$(DEPDIR)/testVCLemu.Po
include ./$(DEPDIR)/testVector.Po
include ./$(DEPDIR)/testVectors.Po

.cpp.o:
	$(AM_V_CXX)$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	$(AM_V_at)$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	$(AM_V_CXX)source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXXCOMPILE) -c -o $@ $<

.cpp.obj:
	$(AM_V_CXX)$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ `$(CYGPATH_W) '$<'`
	$(AM_V_at)$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	$(AM_V_CXX)source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXXCOMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

.cpp.lo:
	$(AM_V_CXX)$(LTCXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	$(AM_V_at)$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Plo
#	$(AM_V_CXX)source='$<' object='$@' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LTCXXCOMPILE) -c -o $@ $<

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs

ID: $(am__tagged_files)
	$(am__define_uniq_tagged_files); mkid -fID $$unique
tags: tags-am
TAGS: tags

tags-am: $(TAGS_DEPENDENCIES) $(am__tagged_files)
	set x; \
	here=`pwd`; \
	$(am__define_uniq_tagged_files); \
	shift; \
	if test -z "$(ETAGS_ARGS)$$*$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  if test $$# -gt 0; then \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      "$$@" $$unique; \
	  else \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      $$unique; \
	  fi; \
	fi
ctags: ctags-am

CTAGS: ctags
ctags-am: $(TAGS_DEPENDENCIES) $(am__tagged_files)
	$(am__define_uniq_tagged_files); \
	test -z "$(CTAGS_ARGS)$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && $(am__cd) $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) "$$here"
cscopelist: cscopelist-am

cscopelist-am: $(am__tagged_files)
	list='$(am__tagged_files)'; \
	case "$(srcdir)" in \
	  [\\/]* | ?:[\\/]*) sdir="$(srcdir)" ;; \
	  *) sdir=$(subdir)/$(srcdir) ;; \
	esac; \
	for i in $$list; do \
	  if test -f "$$i"; then \
	    echo "$(subdir)/$$i"; \
	  else \
	    echo "$$sdir/$$i"; \
	  fi; \
	done >> $(top_builddir)/cscope.files

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

# Recover from deleted '.trs' file; this should ensure that
# "rm -f foo.log; make foo.trs" re-run 'foo.test', and re-create
# both 'foo.log' and 'foo.trs'.  Break the recipe in two subshells
# to avoid problems with "make -n".
.log.trs:
	rm -f $< $@
	$(MAKE) $(AM_MAKEFLAGS) $<

# Leading 'am--fnord' is there to ensure the list of targets does not
# expand to empty, as could happen e.g. with make check TESTS=''.
am--fnord $(TEST_LOGS) $(TEST_LOGS:.log=.trs): $(am__force_recheck)
am--force-recheck:
	@:

$(TEST_SUITE_LOG): $(TEST_LOGS)
	@$(am__set_TESTS_bases); \
	am__f_ok () { test -f "$$1" && test -r "$$1"; }; \
	redo_bases=`for i in $$bases; do \
	              am__f_ok $$i.trs && am__f_ok $$i.log || echo $$i; \
	            done`; \
	if test -n "$$redo_bases"; then \
	  redo_logs=`for i in $$redo_bases; do echo $$i.log; done`; \
	  redo_results=`for i in $$redo_bases; do echo $$i.trs; done`; \
	  if $(am__make_dryrun); then :; else \
	    rm -f $$redo_logs && rm -f $$redo_results || exit 1; \
	  fi; \
	fi; \
	if test -n "$$am__remaking_logs"; then \
	  echo "fatal: making $(TEST_SUITE_LOG): possible infinite" \
	       "recursion detected" >&2; \
	elif test -n "$$redo_logs"; then \
	  am__remaking_logs=yes $(MAKE) $(AM_MAKEFLAGS) $$redo_logs; \
	fi; \
	if $(am__make_dryrun); then :; else \
	  st=0;  \
	  errmsg="fatal: making $(TEST_SUITE_LOG): failed to create"; \
	  for i in $$redo_bases; do \
	    test -f $$i.trs && test -r $$i.trs \
	      || { echo "$$errmsg $$i.trs" >&2; st=1; }; \
	    test -f $$i.log && test -r $$i.log \
	      || { echo "$$errmsg $$i.log" >&2; st=1; }; \
	  done; \
	  test $$st -eq 0 || exit 1; \
	fi
	@$(am__sh_e_setup); $(am__tty_colors); $(am__set_TESTS_bases); \
	ws='[ 	]'; \
	results=`for b in $$bases; do echo $$b.trs; done`; \
	test -n "$$results" || results=/dev/null; \
	all=`  grep "^$$ws*:test-result:"           $$results | wc -l`; \
	pass=` grep "^$$ws*:test-result:$$ws*PASS"  $$results | wc -l`; \
	fail=` grep "^$$ws*:test-result:$$ws*FAIL"  $$results | wc -l`; \
	skip=` grep "^$$ws*:test-result:$$ws*SKIP"  $$results | wc -l`; \
	xfail=`grep "^$$ws*:test-result:$$ws*XFAIL" $$results | wc -l`; \
	xpass=`grep "^$$ws*:test-result:$$ws*XPASS" $$results | wc -l`; \
	error=`grep "^$$ws*:test-result:$$ws*ERROR" $$results | wc -l`; \
	if test `expr $$fail + $$xpass + $$error` -eq 0; then \
	  success=true; \
	else \
	  success=false; \
	fi; \
	br='==================='; br=$$br$$br$$br$$br; \
	result_count () \
	{ \
	    if test x"$$1" = x"--maybe-color"; then \
	      maybe_colorize=yes; \
	    elif test x"$$1" = x"--no-color"; then \
	      maybe_colorize=no; \
	    else \
	      echo "$@: invalid 'result_count' usage" >&2; exit 4; \
	    fi; \
	    shift; \
	    desc=$$1 count=$$2; \
	    if test $$maybe_colorize = yes && test $$count -gt 0; then \
	      color_start=$$3 color_end=$$std; \
	    else \
	      color_start= color_end=; \
	    fi; \
	    echo "$${color_start}# $$desc $$count$${color_end}"; \
	}; \
	create_testsuite_report () \
	{ \
	  result_count $$1 "TOTAL:" $$all   "$$brg"; \
	  result_count $$1 "PASS: " $$pass  "$$grn"; \
	  result_count $$1 "SKIP: " $$skip  "$$blu"; \
	  result_count $$1 "XFAIL:" $$xfail "$$lgn"; \
	  result_count $$1 "FAIL: " $$fail  "$$red"; \
	  result_count $$1 "XPASS:" $$xpass "$$red"; \
	  result_count $$1 "ERROR:" $$error "$$mgn"; \
	}; \
	{								\
	  echo "$(PACKAGE_STRING): $(subdir)/$(TEST_SUITE_LOG)" |	\
	    $(am__rst_title);						\
	  create_testsuite_report --no-color;				\
	  echo;								\
	  echo ".. contents:: :depth: 2";				\
	  echo;								\
	  for b in $$bases; do echo $$b; done				\
	    | $(am__create_global_log);					\
	} >$(TEST_SUITE_LOG).tmp || exit 1;				\
	mv $(TEST_SUITE_LOG).tmp $(TEST_SUITE_LOG);			\
	if $$success; then						\
	  col="$$grn";							\
	 else								\
	  col="$$red";							\
	  test x"$$VERBOSE" = x || cat $(TEST_SUITE_LOG);		\
	fi;								\
	echo "$${col}$$br$${std}"; 					\
	echo "$${col}Testsuite summary for $(PACKAGE_STRING)$${std}";	\
	echo "$${col}$$br$${std}"; 					\
	create_testsuite_report --maybe-color;				\
	echo "$$col$$br$$std";						\
	if $$success; then :; else					\
	  echo "$${col}See $(subdir)/$(TEST_SUITE_LOG)$${std}";		\
	  if test -n "$(PACKAGE_BUGREPORT)"; then			\
	    echo "$${col}Please report to $(PACKAGE_BUGREPORT)$${std}";	\
	  fi;								\
	  echo "$$col$$br$$std";					\
	fi;								\
	$$success || exit 1

check-TESTS:
	@list='$(RECHECK_LOGS)';           test -z "$$list" || rm -f $$list
	@list='$(RECHECK_LOGS:.log=.trs)'; test -z "$$list" || rm -f $$list
	@test -z "$(TEST_SUITE_LOG)" || rm -f $(TEST_SUITE_LOG)
	@set +e; $(am__set_TESTS_bases); \
	log_list=`for i in $$bases; do echo $$i.log; done`; \
	trs_list=`for i in $$bases; do echo $$i.trs; done`; \
	log_list=`echo $$log_list`; trs_list=`echo $$trs_list`; \
	$(MAKE) $(AM_MAKEFLAGS) $(TEST_SUITE_LOG) TEST_LOGS="$$log_list"; \
	exit $$?;
recheck: all $(check_PROGRAMS) $(dist_check_SCRIPTS)
	@test -z "$(TEST_SUITE_LOG)" || rm -f $(TEST_SUITE_LOG)
	@set +e; $(am__set_TESTS_bases); \
	bases=`for i in $$bases; do echo $$i; done \
	         | $(am__list_recheck_tests)` || exit 1; \
	log_list=`for i in $$bases; do echo $$i.log; done`; \
	log_list=`echo $$log_list`; \
	$(MAKE) $(AM_MAKEFLAGS) $(TEST_SUITE_LOG) \
	        am__force_recheck=am--force-recheck \
	        TEST_LOGS="$$log_list"; \
	exit $$?
no_tests.sh.log: no_tests.sh
	@p='no_tests.sh'; \
	b='no_tests.sh'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
main_testVCLemu.log: main_testVCLemu$(EXEEXT)
	@p='main_testVCLemu$(EXEEXT)'; \
	b='main_testVCLemu'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
main_testExceptions.log: main_testExceptions$(EXEEXT)
	@p='main_testExceptions$(EXEEXT)'; \
	b='main_testExceptions'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
main_testScalars.log: main_testScalars$(EXEEXT)
	@p='main_testScalars$(EXEEXT)'; \
	b='main_testScalars'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
main_testVectors.log: main_testVectors$(EXEEXT)
	@p='main_testVectors$(EXEEXT)'; \
	b='main_testVectors'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
main_testGeometry.log: main_testGeometry$(EXEEXT)
	@p='main_testGeometry$(EXEEXT)'; \
	b='main_testGeometry'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
main_testStrings.log: main_testStrings$(EXEEXT)
	@p='main_testStrings$(EXEEXT)'; \
	b='main_testStrings'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
main_testStrPR.log: main_testStrPR$(EXEEXT)
	@p='main_testStrPR$(EXEEXT)'; \
	b='main_testStrPR'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
main_testTextFile.log: main_testTextFile$(EXEEXT)
	@p='main_testTextFile$(EXEEXT)'; \
	b='main_testTextFile'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
main_testSlideArray.log: main_testSlideArray$(EXEEXT)
	@p='main_testSlideArray$(EXEEXT)'; \
	b='main_testSlideArray'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
main_testPointersSlideArray.log: main_testPointersSlideArray$(EXEEXT)
	@p='main_testPointersSlideArray$(EXEEXT)'; \
	b='main_testPointersSlideArray'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
main_testItemsList.log: main_testItemsList$(EXEEXT)
	@p='main_testItemsList$(EXEEXT)'; \
	b='main_testItemsList'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
main_testPointersList.log: main_testPointersList$(EXEEXT)
	@p='main_testPointersList$(EXEEXT)'; \
	b='main_testPointersList'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
main_testVector.log: main_testVector$(EXEEXT)
	@p='main_testVector$(EXEEXT)'; \
	b='main_testVector'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
main_testQuantificator.log: main_testQuantificator$(EXEEXT)
	@p='main_testQuantificator$(EXEEXT)'; \
	b='main_testQuantificator'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
main_testFunction.log: main_testFunction$(EXEEXT)
	@p='main_testFunction$(EXEEXT)'; \
	b='main_testFunction'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
main_testMotionFunction.log: main_testMotionFunction$(EXEEXT)
	@p='main_testMotionFunction$(EXEEXT)'; \
	b='main_testMotionFunction'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
main_testSquareFunction.log: main_testSquareFunction$(EXEEXT)
	@p='main_testSquareFunction$(EXEEXT)'; \
	b='main_testSquareFunction'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
main_testRampFunction.log: main_testRampFunction$(EXEEXT)
	@p='main_testRampFunction$(EXEEXT)'; \
	b='main_testRampFunction'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
main_testComposedMotionFunction.log: main_testComposedMotionFunction$(EXEEXT)
	@p='main_testComposedMotionFunction$(EXEEXT)'; \
	b='main_testComposedMotionFunction'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
main_testFigure.log: main_testFigure$(EXEEXT)
	@p='main_testFigure$(EXEEXT)'; \
	b='main_testFigure'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
main_testContourFigureList.log: main_testContourFigureList$(EXEEXT)
	@p='main_testContourFigureList$(EXEEXT)'; \
	b='main_testContourFigureList'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
main_testBarrier.log: main_testBarrier$(EXEEXT)
	@p='main_testBarrier$(EXEEXT)'; \
	b='main_testBarrier'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
main_testExclusionArea.log: main_testExclusionArea$(EXEEXT)
	@p='main_testExclusionArea$(EXEEXT)'; \
	b='main_testExclusionArea'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
main_testExclusionAreaList.log: main_testExclusionAreaList$(EXEEXT)
	@p='main_testExclusionAreaList$(EXEEXT)'; \
	b='main_testExclusionAreaList'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
main_testInstruction.log: main_testInstruction$(EXEEXT)
	@p='main_testInstruction$(EXEEXT)'; \
	b='main_testInstruction'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
main_testMessageInstruction.log: main_testMessageInstruction$(EXEEXT)
	@p='main_testMessageInstruction$(EXEEXT)'; \
	b='main_testMessageInstruction'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
main_testPairPositionAngles.log: main_testPairPositionAngles$(EXEEXT)
	@p='main_testPairPositionAngles$(EXEEXT)'; \
	b='main_testPairPositionAngles'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
main_testMotionProgram.log: main_testMotionProgram$(EXEEXT)
	@p='main_testMotionProgram$(EXEEXT)'; \
	b='main_testMotionProgram'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
main_testArm.log: main_testArm$(EXEEXT)
	@p='main_testArm$(EXEEXT)'; \
	b='main_testArm'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
main_testCilinder.log: main_testCilinder$(EXEEXT)
	@p='main_testCilinder$(EXEEXT)'; \
	b='main_testCilinder'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
main_testActuator.log: main_testActuator$(EXEEXT)
	@p='main_testActuator$(EXEEXT)'; \
	b='main_testActuator'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
main_testRoboticPositioner.log: main_testRoboticPositioner$(EXEEXT)
	@p='main_testRoboticPositioner$(EXEEXT)'; \
	b='main_testRoboticPositioner'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
main_testRoboticPositionerList1.log: main_testRoboticPositionerList1$(EXEEXT)
	@p='main_testRoboticPositionerList1$(EXEEXT)'; \
	b='main_testRoboticPositionerList1'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
main_testRoboticPositionerList2.log: main_testRoboticPositionerList2$(EXEEXT)
	@p='main_testRoboticPositionerList2$(EXEEXT)'; \
	b='main_testRoboticPositionerList2'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
main_testRoboticPositionerList3.log: main_testRoboticPositionerList3$(EXEEXT)
	@p='main_testRoboticPositionerList3$(EXEEXT)'; \
	b='main_testRoboticPositionerList3'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
main_testFiberMOSModel.log: main_testFiberMOSModel$(EXEEXT)
	@p='main_testFiberMOSModel$(EXEEXT)'; \
	b='main_testFiberMOSModel'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
main_testFiberConnectionModel.log: main_testFiberConnectionModel$(EXEEXT)
	@p='main_testFiberConnectionModel$(EXEEXT)'; \
	b='main_testFiberConnectionModel'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
main_testSkyPoint.log: main_testSkyPoint$(EXEEXT)
	@p='main_testSkyPoint$(EXEEXT)'; \
	b='main_testSkyPoint'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
main_testProjectionPoint.log: main_testProjectionPoint$(EXEEXT)
	@p='main_testProjectionPoint$(EXEEXT)'; \
	b='main_testProjectionPoint'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
main_testTile.log: main_testTile$(EXEEXT)
	@p='main_testTile$(EXEEXT)'; \
	b='main_testTile'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
main_testTelescopeProjectionModel.log: main_testTelescopeProjectionModel$(EXEEXT)
	@p='main_testTelescopeProjectionModel$(EXEEXT)'; \
	b='main_testTelescopeProjectionModel'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
main_testAllocation.log: main_testAllocation$(EXEEXT)
	@p='main_testAllocation$(EXEEXT)'; \
	b='main_testAllocation'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
main_testAllocationList.log: main_testAllocationList$(EXEEXT)
	@p='main_testAllocationList$(EXEEXT)'; \
	b='main_testAllocationList'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
main_testMotionProgramValidator.log: main_testMotionProgramValidator$(EXEEXT)
	@p='main_testMotionProgramValidator$(EXEEXT)'; \
	b='main_testMotionProgramValidator'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
main_testMotionProgramGenerator.log: main_testMotionProgramGenerator$(EXEEXT)
	@p='main_testMotionProgramGenerator$(EXEEXT)'; \
	b='main_testMotionProgramGenerator'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
main_testPositionerCenter.log: main_testPositionerCenter$(EXEEXT)
	@p='main_testPositionerCenter$(EXEEXT)'; \
	b='main_testPositionerCenter'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
main_testFileMethods.log: main_testFileMethods$(EXEEXT)
	@p='main_testFileMethods$(EXEEXT)'; \
	b='main_testFileMethods'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
main_testFMOSATable.log: main_testFMOSATable$(EXEEXT)
	@p='main_testFMOSATable$(EXEEXT)'; \
	b='main_testFMOSATable'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
main_testOutputs.log: main_testOutputs$(EXEEXT)
	@p='main_testOutputs$(EXEEXT)'; \
	b='main_testOutputs'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
.test.log:
	@p='$<'; \
	$(am__set_b); \
	$(am__check_pre) $(TEST_LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_TEST_LOG_DRIVER_FLAGS) $(TEST_LOG_DRIVER_FLAGS) -- $(TEST_LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
#.test$(EXEEXT).log:
#	@p='$<'; \
#	$(am__set_b); \
#	$(am__check_pre) $(TEST_LOG_DRIVER) --test-name "$$f" \
#	--log-file $$b.log --trs-file $$b.trs \
#	$(am__common_driver_flags) $(AM_TEST_LOG_DRIVER_FLAGS) $(TEST_LOG_DRIVER_FLAGS) -- $(TEST_LOG_COMPILE) \
#	"$$tst" $(AM_TESTS_FD_REDIRECT)

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d "$(distdir)/$$file"; then \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
	  else \
	    test -f "$(distdir)/$$file" \
	    || cp -p $$d/$$file "$(distdir)/$$file" \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
	$(MAKE) $(AM_MAKEFLAGS) $(check_PROGRAMS) \
	  $(dist_check_SCRIPTS)
	$(MAKE) $(AM_MAKEFLAGS) check-TESTS
check: check-am
all-am: Makefile
installdirs:
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	if test -z '$(STRIP)'; then \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	      install; \
	else \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	    "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'" install; \
	fi
mostlyclean-generic:
	-test -z "$(TEST_LOGS)" || rm -f $(TEST_LOGS)
	-test -z "$(TEST_LOGS:.log=.trs)" || rm -f $(TEST_LOGS:.log=.trs)
	-test -z "$(TEST_SUITE_LOG)" || rm -f $(TEST_SUITE_LOG)

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-checkPROGRAMS clean-generic clean-libtool \
	mostlyclean-am

distclean: distclean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

html-am:

info: info-am

info-am:

install-data-am:

install-dvi: install-dvi-am

install-dvi-am:

install-exec-am:

install-html: install-html-am

install-html-am:

install-info: install-info-am

install-info-am:

install-man:

install-pdf: install-pdf-am

install-pdf-am:

install-ps: install-ps-am

install-ps-am:

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic \
	mostlyclean-libtool

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am:

.MAKE: check-am install-am install-strip

.PHONY: CTAGS GTAGS TAGS all all-am check check-TESTS check-am clean \
	clean-checkPROGRAMS clean-generic clean-libtool cscopelist-am \
	ctags ctags-am distclean distclean-compile distclean-generic \
	distclean-libtool distclean-tags distdir dvi dvi-am html \
	html-am info info-am install install-am install-data \
	install-data-am install-dvi install-dvi-am install-exec \
	install-exec-am install-html install-html-am install-info \
	install-info-am install-man install-pdf install-pdf-am \
	install-ps install-ps-am install-strip installcheck \
	installcheck-am installdirs maintainer-clean \
	maintainer-clean-generic mostlyclean mostlyclean-compile \
	mostlyclean-generic mostlyclean-libtool pdf pdf-am ps ps-am \
	recheck tags tags-am uninstall uninstall-am

.PRECIOUS: Makefile


# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
