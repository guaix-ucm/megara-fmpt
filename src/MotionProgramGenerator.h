// Copyright (c) 2014-2015 Isaac Morales Durán. All rights reserved.
// Institute of Astrophysics of Andalusia, IAA-CSIC
//
// This file is part of FMPT (Fiber MOS Positioning Tools)
//
// FMPT is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

//---------------------------------------------------------------------------
//File: MotionProgramGenerator.h
//Content: generator of motionprograms
//Last update: 26/12/2014
//Author: Isaac Morales Durán
//---------------------------------------------------------------------------

#ifndef MOTIONPROGRAMGENERATOR_H
#define MOTIONPROGRAMGENERATOR_H

#include "MotionProgramValidator.h"
#include "TargetPointList.h"
#include "FiberMOSModel2.h"
#include "MotionProgram.h"

//---------------------------------------------------------------------------

using namespace Models;

//namespace for positioning
namespace Positioning {

//###########################################################################
//TMotionProgramGenerator:
//###########################################################################

//A MPG (Motion Program Generator) provide functions to generates MPs (motion
//programs). For this, the MPG shall be use the Fiber MOS Model to perform
//simulations. All MPs  generated by the MPG will be valid, is to say they
//will avoid dynamic collisions. For accomplish of this purpose the MPG
//will make use of the validator function, to assure that the generation
//process is valid. Each MP shall go with an IPL (Initial Position List)
//of type TPairsPositionAngleList.

//class motion program generator
class TMotionProgramGenerator : public TMotionProgramValidator,
        public TTargetPointList {
protected:
    //SETTING PARAMETERS OF THE ALGORITHMS:

    double __dt_jmp;

public:
    //SETTING PROPERTIES:

    //jump (in negative direction) in radians, it is performed each time
    //that a collission is detected during the radial retraction
    //shall be upper zero
    //default value: -M_PI/36 rad
    double getdt_jmp(void) const {return __dt_jmp;}

    //It is desirable that the jump is expressed in radians and not in steps,
    //for several reasons:
    // - If the number of steps change, the jump not should vary.
    // - The rotor position and their domain limits, are stored in radians
    //   so that the checking belonging to domain, could introduce numerical
    //   errors.

    //Note that when the jump correspond to a integer number of steps, when
    //quantification is enabled, the rotors do not change their positions.

    //-----------------------------------------------------------------------
    //BUILDING AND DESTROYING METHODS:

    //build a motion program generator
    //attached to a robotic positionerlist
    TMotionProgramGenerator(TFiberMOSModel *FiberMOSModel);
    //destroy the targetpoints and destroy the MPG
    ~TMotionProgramGenerator(void);

    //-----------------------------------------------------------------------
    //METHODS OF LOWER LEVEL:

/*    //program the retraction of all RP of the list Outsiders
    //Preconditions:
    //  All RPs of the list Outsiders shall be in insecurity position.
    //  All RPs of the list Outsiders, shall have a rotor 2 velocity
    //  approximately double that rotor 1 velocity.
    //Notes:
    //  The quantifiers of the rotors may be enabled or disabled.
    void programRetraction(TRoboticPositionerList &Outsiders_);
*/
    //Segregate the RPs of the list Outsiders, in disjoint subsets.
    //Preconditions:
    //  All RPs in the list Outsiders shall be operatives
    //  All RPs in the list Outsiders shall be in insecurity positions
    void segregateRPsInDisjointSets(
            TPointersList<TRoboticPositionerList>& DisjointSets,
            const TRoboticPositionerList& Outsiders);

    //Determines if not all RPs of a list follow the MEGARA distribution.
    //Preconditions:
    //  All RPs of the disjoint set shall be separated
    //  a distance D - 2*L or upper.
    bool notAllRPsFollowMEGARADistribution(
            const TRoboticPositionerList& Set);

    //Segregates the RPs of a set, in disperse subsets.
    //Preconditions:
    //  Pointer Subsets should point to built list of disperse subsets.
    //  All RPs of the list Set shall follow the MEGARA distribution.
    //  All RPs in the list Set shall be in the Fiber MOS Model.
    void segregateRPsInDisperseSubsets(
            TPointersList<TRoboticPositionerList > *Subsets,
            TRoboticPositionerList& Set);
/*
    //Determines the limits of the open interval (l1, l2)
    //where RP collide with RPA.
    //It is to say in l1 and l2 there isn't collision.
    //Inputs:
    //  RP: robotic positioner whose rotor 1 shall be displaced.
    //  RPA: robotic positioner adjacent to RP which shall remains stoped.
    //Outputs:
    //  l1: stable lower limit of interval (l1, l2)
    //  l2: stable upper limit of interval (l1, l2)
    //Postconditions:
    //  The RP will be in their initial status.
    //Notes:
    //  The quantifiers of the rotors may be enabled or disabled.
    //  When l1 == l2 there isn't collision. (In this case moreover l1 == p1 == l2).
    //  When l1 < l2, the soltion can be searched in both senses.
    //  When l2 < l1, the solution shall be searched:
    //      in positive sense, when p_1 is in [p_1min, l2)
    //      in negative sense, when p_1 is in (l1, p_1max]
    void determinesCollisionInterval(double& l1, double& l2,
            TRoboticPositioner *RP, const TRoboticPositioner *RPA);

    //DEFINITION: tendence of turn: when therotor 1 is displaced, for solve
    //their collision, onlycan be displaced again in the same direction.

    //Determines if a RP in collision status can solve their collision
    //turning the rotor 1, and calculates the new stable position of it,
    //in the indicated direction by the tendence.
    //Inputs:
    //  RP: the robotic positioner in collission status.
    //Onputs:
    //- collisionCanbesolved: flag indicating if collision can be solved
    //  turning the rotor 1.
    //- p_1new: the stable position which the rotor 1 of the RP must bemoved
    //  to solve the collision.
    //Preconditions:
    //  Pointer RP shall  point to built robotic positioner.
    //  The RP shall be in collision status with one or more adjacent RPs.
    //  The rotor 1 of the RP shall has stacked one position almost.
    //Postconditions:
    //  The RP will be in their initial status.
    //Notes:
    //  The quantifiers of the rotors may be enabled or disabled.
    bool collisionCanBesolved(double& p_1new, TRoboticPositioner *RP);
*/
    //Propose a recovery program composed to two gestures:
    //  1. radial retraction
    //  2. abatement of the arm (if necessary)
    void proposeRecoveryProgram(TMotionProgram& MP, TRoboticPositioner *RP);

    //Propose a recovery program composed to three gestures:
    //  1. turn of rotor 1 to p_1new
    //  2. radial retraction
    //  3. abatement of the arm (if necessary)
    void proposeRecoveryProgram(TMotionProgram& MP, TRoboticPositioner *RP,
                                double p_1new);

    //Search in negative sense, the stable positions of the rotor 1 of the RP,
    //where the collision can be solved.
    //Inputs:
    //  RP: robotic positioner whose rotor 1 shall be displaced.
    //  RPA: robotic positioner adjacent to RP which shall remains stoped.
    //  dt1max: maximun displacement of the rotor 1 for search the solution
    //      in rad.
    //Outputs:
    //  searchSolutionInNegativeSense: indicates if the solution is valid.
    //  p_1new: last position where solution has been searched.
    //  MP: the solution.
    //Preconditions:
    //  The RP shall be disabled the quantifier of their rotors.
    //  The RP shall be stacked the actual position of their rotor 1.
    //  The searching interval dt1max shall be upper zero.
    //  The RP shall contains the default MP.
    //Postconditions:
    //  The RP will be in their initial status.
    //Notes:
    //  The initial position can be stable or inestable.
    //  When searchSolutionInNegativeSense == false
    //      solution p_1new will be nearest to theta_1 - dt1max.
    bool searchSolutionInNegativeSense(double& p_1new, TMotionProgram&MP,
        TRoboticPositioner *RP, double dt1max);

    //Search in positive sense, the stable positions of the rotor 1 of the RP,
    //where the collision can be solved.
    //Inputs:
    //  RP: robotic positioner whose rotor 1 shall be displaced.
    //  RPA: robotic positioner adjacent to RP which shall remains stoped.
    //  dt1max: maximun displacement of the rotor 1 for search the solution
    //      in rad.
    //Outputs:
    //  searchSolutionInNegativeSense: indicates if the solution is valid.
    //  p_1new: last position where solution has been searched.
    //  MP: the solution.
    //Preconditions:
    //  The RP shall be disabled the quantifier of their rotors.
    //  The RP shall be stacked the actual position of their rotor 1.
    //  The searching interval dt1max shall be upper zero.
    //  The RP shall contains the default MP.
    //Postconditions:
    //  The RP will be in their initial status.
    //Notes:
    //  The initial position can be stable or inestable.
    //  When searchSolutionInPositiveSense == false
    //      solution p_1new will be nearest to theta_1 + dt1max.
    bool searchSolutionInPositiveSense(double& p_1new, TMotionProgram&MP,
        TRoboticPositioner *RP, double dt1max);

/*    //Determines if a RP in collision status can solve their collision
    //turning the rotor 1, and calculates the new stable position of this,
    //in the indicated direction by the tendence.
    //Inputs:
    //  RP: the robotic positioner in collission status.
    //  dt1max: maximun displacement of the rotor 1 for search the solution.
    //Onputs:
    //- collisionCanbesolved: flag indicating if collision can be solved
    //  turning the rotor 1.
    //- p_1new: the stable position which the rotor 1 of the RP must be moved
    //  to solve the collision.
    //Preconditions:
    //  Pointer RP shall  point to built robotic positioner.
    //  The RP shall be in collision status with one or more adjacent RPs.
    //  The RP shall be disabled the quantifiers of their rotors.
    //Postconditions:
    //  The RP will be in their initial status.
    //Notes:
    //  The quantifiers of the rotors may be enabled or disabled.
    bool collisionCanBesolved(double& p_1new,
                              TRoboticPositioner *RP, double dt1max);
*/
    //Determines the RPs which can be recovered in each subset of each set.
    //Inputs:
    //  DDS: structure to contain disjoint disperse subsets.
    //Outputs:
    //  RecoverablesDDS: structure to contain the RPs which can be recovered.
    //  UnrecoverablesDDS: structure to contain the RPs which can not be recovered.
    //Preconditions:
    //  All RPs of the Fiber MOS Model shall be configurated for MP generation.
    //  All RPs of DDS:
    //      shall be in the Fiber MOS  Model;
    //      shall be in insecure position;
    //      shall be enabled the quantifiers of their rotors.
    //      shall not have dynamic collisions;
    //Postconditions:
    //  RecoverablesDDS will contains the RPs which can be recovered,
    //  programmedwith the necessary instruction for their recovery.
    //  All RPs of the RecoverablesDDS, will beintheir initial  positions.
    //  UnrecoverablesDDS will contains the RPs which can not be recovered.
    //Notes:
    //  It is not necessary that the RPs of DDS have stored their initial
    //  positions.
    //  It is not necessary that the RPs of DDS have disabled the quantifiers
    //  of their rotors.
    //  It is not necessary that the RPs of DDS have programmed any movement.
    void segregateRecoverables(
      TPointersList<TPointersList<TRoboticPositionerList> >& RecoverablesDDS,
      TPointersList<TPointersList<TRoboticPositionerList> >& UnrecoverablesDDS,
      TPointersList<TPointersList<TRoboticPositionerList> >& DDS);

    //Add to a MP, the corresponding list or lists of message instruction
    //correspondint to the individual MPs of the RPs of a RPlist
    //Inputs:
    //  RPsToBeRetracted: list of the RPs which has been programmed.
    //  MP: motion program to add themessage list.
    //Outputs:
    //  MP: motion program modified.
    //Preconditions:
    //  All RPs of the list RPsToBeRetracted shall have stacked the initial
    //      positions of their rotors.
    //  All RPs of the list RPsToBeRetracted shall be in their stacked positions.
    //  All RPs of the list RPsToBeRetracted shall have a recovery program.
    void addMessageLists(TMotionProgram& MP,
                         const TRoboticPositionerList& RPsToBeRecovered);

    //Add to the DP the message-instruction list to move the RPs
    //of the list Inners to the origins
    //Inputs:
    //  Inners: list of operative RPs in seciry position out the origin.
    //Output:
    //  DP: depositioning program which the message list will be added.
    //Preconditions:
    //  All RPs of the list Inners shall be operatives in secure position
    //  but out the origin.
    void addMessageListToGoToTheOrigins(TMotionProgram& DP,
        const TRoboticPositionerList& Inners);

    //-----------------------------------------------------------------------
    //METHODS TO GENERATE MPs:

    //Nomenclature:
    //- Positioning Program: to go the observing positiong, need has a first
    //  gesture to go to the starting positions in the secure area.
    //- Depositioning Program: antagonicus of PP, include a final gesture
    //  tomove therotors to their origins.
    //- Recovery Program: is a DP without the final gesture to go to the
    //  origins.
    //- Parking Gesture: gesture to mo the rotors to their origins.

    //Generates a recovery program for a given set of operative RPs
    //in insecurity positions and determines the RPs of the given set,
    //which can not be recovered because are in collision status
    //or because are obstructed in insecurity positions.
    //Preconditions:
    //  All RPs of the Fiber MOS Model, shall be in their initial positions.
    //  All RPs of the list Outsiders:
    //      shall be in the Fiber MOS Model;
    //      shall be operatives;
    //      shall be in insecurity positions;
    //      shall have enabled the quantifiers of their rotors;
    //      shall be setted in order to the rotor 2 velocity
    //          is approximately double than rotor 1 velocity.
    //Postconditions:
    //  All RPs of the FMM will be configured for MP validation.
    //  When the generated recovery program isn't valid:
    //      All RPs of the FMM:
    //          will have disabled the quantifiers of their rotors;
    //          will be in the first position where the collision was detected
    //              during the validation process.
    //  When the generated recovery program is valid (even the trivial case):
    //      All RPs of the FMM:
    //          will have enabled the quantifiers of their rotors;
    //          will be in their final positions.
    //Inputs:
    //  FMM: Fiber MOS Model with RPs in their initial positions.
    //  Outsiders: list of operative RPs in insecure positions which
    //      we want recover the security positions.
    //Outputs:
    //  generateRecoveryProgram: flag indicating if the recovery program
    //      generated with this function is valid.
    //  Collided: list of RPs collided in insecurity position.
    //  Obstructed: list of RPs obstructed in insecurity position.
    //  MP: recovery program.
    bool generateRecoveryProgram(TRoboticPositionerList& Collided,
        TRoboticPositionerList& Obstructed, TMotionProgram& MP,
        const TRoboticPositionerList& Outsiders);

    //Generates a depositioning program for a given set of operative RPs
    //in insecurity positions and determines the RPs of the given set,
    //which can not be recovered because are in collision status
    //or because are obstructed in insecurity positions.
    //Preconditions:
    //  All RPs of the Fiber MOS Model, shall be in their initial positions.
    //  All RPs of the list Outsiders, shall be in the Fiber MOS Model.
    //  All RPs of the list Outsiders, shall be operatives.
    //  All RPs of the list Outsiders, shall be in insecurity positions.
    //  All RPs of the list Outsiders, shall have enabled the quantifiers.
    //  All RPs of the list Outsiders, shall have a rotor 2 velocity
    //  approximately double that rotor 1 velocity.
    //Postconditions:
    //  All RPs of the Fiber MOS Model will be configured for MP validation
    //  All RPs of the fiber MOS Model will be in their final positions,
    //  or the first position where the collision was detected.
    //  All RPs of the Fiber MOS Model will have disabled the quantifiers.
    //Inputs:
    //  FiberMOSModel: Fiber MOS Model with RPs in their initial positions.
    //  Outsiders: list of operative RPs in insecure positions which
    //      we want recover the security positions.
    //Outputs:
    //  generateParkingProgram: flag indicating if the parking program
    //      can be generated or not with this function.
    //  Collided: list of RPs collided in insecurity position.
    //  Obstructed: list of RPs obstructed in insecurity position.
    //  DP: depositioning program.
    bool generateDepositioningProgram(TRoboticPositionerList& Collided,
        TRoboticPositionerList& Obstructed, TMotionProgram& DP,
        const TRoboticPositionerList& Outsiders);

    //Generates a positioning program from a given depositioning program.
    void generatePositioningProgram(TMotionProgram& PP,
        const TMotionProgram& DP, const TPairPositionAnglesList& IPL);

    //Generates a pair (PP, DP) for a given set of operative RPs
    //in insecurity positions and determines the RPs of the given set,
    //which can not be recovered because are in collision status
    //or because are obstructed in insecurity positions.
    //Preconditions:
    //  All RPs of the Fiber MOS Model, shall be in their observing positions.
    //  All RPs of the list Outsiders, shall be in the Fiber MOS Model.
    //  All RPs of the list Outsiders, shall be operatives.
    //  All RPs of the list Outsiders, shall be in insecurity positions.
    //  All RPs of the list Outsiders, shall have enabled the quantifiers.
    //Postconditions:
    //  All RPs of the Fiber MOS Model will be configured for MP validation
    //  All RPs of the fiber MOS Model will be in their final positions,
    //  or the first position where the collision was detected.
    //  All RPs of the Fiber MOS Model will have disabled the quantifiers.
    //Inputs:
    //  FiberMOSModel: Fiber MOS Model with RPs in their observing positions.
    //  Outsiders: list of operative RPs in insecure positions which
    //      we want recover the security positions.
    //Outputs:
    //  generateParkingProgram: flag indicating if the pair (PP, DP)
    //      can be generated or not with this function.
    //  Collided: list of RPs collided in insecurity position.
    //  Obstructed: list of RPs obstructed in insecurity position.
    //  PP: positioning program.
    //  DP: depositioning program.
    bool generatePairPPDP(TRoboticPositionerList& Collided,
        TRoboticPositionerList& Obstructed, TMotionProgram& PP,
        TMotionProgram& DP, const TRoboticPositionerList& Outsiders);
};

//---------------------------------------------------------------------------

} //namespace Positioning

//---------------------------------------------------------------------------
#endif // MOTIONPROGRAMGENERATOR_H
